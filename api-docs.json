{
  "swagger": "2.0",
  "info": {
    "description": "This is the description of the AMPAREX Rest API. All REST calls plus the corresponding data model are described in this documentation. Direct calls to the server are possible over this page.&lt;br/&gt;Following steps are needed to use the API:&lt;br/&gt;&lt;br/&gt;1. Get the alias identifier of your login account from AMPAREX Software (Branch office administration) -&gt; Service accounts -&gt; your service account -&gt; copy alias token)&lt;br/&gt;2. Please use the login URL /alias/{alias}/login under section \"Login\" below with your credentials to get a valid bearer token.&lt;br/&gt;3. Copy bearer token from login response&lt;br/&gt;3. Then click \"Authorize\" on the top of this page&lt;br/&gt;4. Insert into the field \"value\": \"Bearer {Your Bearer token}\" (without {}) for example \"Bearer 334d34d3dgh5tz5h5h\"&lt;br/&gt;4. Click Authorize&lt;br/&gt;5. Bearer token will be automatically used in the header for every following API call.&lt;br/&gt;6. Now you are ready to use the API&lt;br/&gt;&lt;br/&gt;See also [documentation](https://manual.amparex.com/display/HAN/AMPAREX+API) for help&lt;br/&gt;&lt;br/&gt;Documentation of all the used fields and objects is at the bottom of this page called \"Models\"",
    "title": "AMPAREX Rest API Documentation",
    "contact": { "name": "AMPAREX", "url": "https://www.amparex.com" }
  },
  "host": "trial.amparex.net:8078",
  "basePath": "/amparex/webaxapi",
  "tags": [
    { "name": "Addresses", "description": "REST API for addresss" },
    {
      "name": "ApplicationTypes",
      "description": "REST API for application types"
    },
    {
      "name": "AppointmentPlanner",
      "description": "REST API for appointment planner"
    },
    {
      "name": "AppointmentTemplates",
      "description": "REST API for appointment templates for time planner"
    },
    { "name": "Appointments", "description": "REST API for appointments" },
    {
      "name": "ArticleItems",
      "description": "REST API for article items (Stock Items)"
    },
    {
      "name": "ArticleVariants",
      "description": "REST API for articlevariants"
    },
    { "name": "Articles", "description": "REST API for articles" },
    { "name": "Audiograms", "description": "REST API for audiograms" },
    { "name": "Availabilities", "description": "REST API for availabilities" },
    { "name": "Branches", "description": "REST API for branches" },
    { "name": "Brands", "description": "REST API for brands" },
    {
      "name": "CashDeskBalances",
      "description": "REST API for cashdeskbalances"
    },
    { "name": "Colors", "description": "REST API for colors" },
    { "name": "Comments", "description": "REST API for comments" },
    { "name": "Companies", "description": "REST API for companies" },
    { "name": "ContactLenses", "description": "REST API for contactlenses" },
    { "name": "Customers", "description": "REST API for customers" },
    { "name": "Deliveries", "description": "REST API for deliveries" },
    { "name": "Doctors", "description": "REST API for doctors" },
    {
      "name": "DocumentTemplates",
      "description": "REST API for document templates"
    },
    { "name": "Glasses", "description": "REST API for glassess" },
    {
      "name": "HealthInsurance",
      "description": "REST API for healthinsurances"
    },
    { "name": "HearingCares", "description": "REST API for hearingcares" },
    { "name": "Invoices", "description": "REST API for invoices" },
    { "name": "Lenses", "description": "REST API for lenses" },
    { "name": "Login", "description": "REST API for authentication" },
    { "name": "MainVersions", "description": "REST API for mainversions" },
    {
      "name": "MarketingActions",
      "description": "REST API for marketingactions"
    },
    {
      "name": "MarketingCampaigns",
      "description": "REST API for marketingcampaigns"
    },
    {
      "name": "MarketingContacts",
      "description": "REST API for marketingcontacts"
    },
    { "name": "Orders", "description": "REST API for orders" },
    { "name": "Principals", "description": "REST API for principals" },
    { "name": "Programs", "description": "REST API for programs" },
    { "name": "Properties", "description": "REST API for properties" },
    {
      "name": "Resources",
      "description": "REST API for resources of time planner"
    },
    { "name": "Servers", "description": "REST API for servers" },
    {
      "name": "ServiceContracts",
      "description": "REST API for servicecontracts"
    },
    { "name": "Staffs", "description": "REST API for staffs" },
    {
      "name": "SurveyTemplates",
      "description": "REST API for surveytemplates"
    },
    { "name": "Surveys", "description": "REST API for surveys" },
    { "name": "Treatments", "description": "REST API for treatments" },
    { "name": "Versions", "description": "REST API for versions" },
    { "name": "Views", "description": "REST API for views of timeplanner" }
  ],
  "paths": {
    "/alias/{alias}/login": {
      "post": {
        "tags": ["Login"],
        "summary": "Login with user and password, use alias from AMPAREX service account. Each consecutive request, other than login, grants a new security-token with a default validity of 60 minutes. Use the new token to avoid expiration.The use of URL parameters is a securirty isse, whenever possible use the header parameters!",
        "operationId": "getSecTokenUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "header",
            "description": "username",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "header",
            "description": "password",
            "required": false,
            "type": "string"
          },
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "description": "insecure URL parameter, better use header parameter",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "insecure URL parameter, better use header parameter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SecurityToken" }
          },
          "401": {
            "description": "Unauthorized - either the username does not exists, or the given password does not match the username, or the given password does not match the security criteria (very strong) defined in AMPAREX"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          },
          "503": {
            "description": "Service Unavailable - no service configuration available that matches the specified alias"
          }
        }
      }
    },
    "/alias/{alias}/protected/addresses": {
      "post": {
        "tags": ["Addresses"],
        "summary": "Create a new address",
        "operationId": "createAddressUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/AddressToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/addresses/orderbyfields": {
      "get": {
        "tags": ["Addresses"],
        "summary": "Get possible fields for orderby of address fields",
        "operationId": "getAddressOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/addresses/search": {
      "post": {
        "tags": ["Addresses"],
        "summary": "Get a list of addresss",
        "description": "Get a list of addresss  by a search query, paging is used, specify limit and page; Model Type: Address is returned",
        "operationId": "searchAddresssUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "addressSearchQuery",
            "description": "addressSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/AddressSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Address»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/addresses/{id}": {
      "get": {
        "tags": ["Addresses"],
        "summary": "Get one specific address by id",
        "operationId": "getAddressUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Address" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Addresses"],
        "summary": "Update address with given id",
        "operationId": "updateAddressUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/AddressToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/applicationtypes": {
      "get": {
        "tags": ["ApplicationTypes"],
        "summary": "Get possible values for application type",
        "operationId": "findAllAppTypesUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ApplicationType" }
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointmentplanner/booking": {
      "post": {
        "tags": ["AppointmentPlanner"],
        "summary": "Book appointment for template",
        "description": "Create a new appointment",
        "operationId": "bookAppointmentUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "data",
            "description": "data",
            "required": true,
            "schema": { "$ref": "#/definitions/Book appointment by template" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointmentplanner/freebusy": {
      "post": {
        "tags": ["AppointmentPlanner"],
        "summary": "Get a list of time slots free/busy",
        "description": "Get a list of time slots in appointment planner",
        "operationId": "searchFreeBusyUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/AppointmentFreeBusySearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Free busy appointment" }
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointmentplanner/info": {
      "get": {
        "tags": ["AppointmentPlanner"],
        "summary": "Get appointment planner information",
        "operationId": "getAppointmentPlannerInformationUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Appointment planner" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointmentplanner/synchronize": {
      "post": {
        "tags": ["AppointmentPlanner"],
        "summary": "Request for synchronization",
        "description": "Ask for changes in appointment planner",
        "operationId": "synchronizeUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "syncRequest",
            "description": "syncRequest",
            "required": true,
            "schema": { "$ref": "#/definitions/request for synchronization" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/result of synchronization" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointments": {
      "post": {
        "tags": ["Appointments"],
        "summary": "Create a new appointment",
        "operationId": "createAppointmentUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/AppointmentToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "409": {
            "description": "Conflict - the slot for the appointment is overbooked"
          },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointments/orderbyfields": {
      "get": {
        "tags": ["Appointments"],
        "summary": "Get possible fields for orderby of appointment fields",
        "operationId": "getAppointmentOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointments/search": {
      "post": {
        "tags": ["Appointments"],
        "summary": "Get a list of appointments",
        "description": "Get a list of appointments by a search query, paging is used, specify limit and page; Model Type: Appointment is returned",
        "operationId": "searchAppointmentsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "appointmentSearchQuery",
            "description": "appointmentSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/AppointmentSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Appointment»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointments/{id}": {
      "get": {
        "tags": ["Appointments"],
        "summary": "Get one specific appointment by id",
        "operationId": "getAppointmentUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Appointment" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "delete": {
        "tags": ["Appointments"],
        "summary": "Delete an appointment with given id",
        "operationId": "deleteAvailabilityUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Appointments"],
        "summary": "Update appointment with given id",
        "operationId": "updateAppointmentUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/AppointmentToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "409": {
            "description": "Conflict - the slot for the appointment is overbooked"
          },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/appointmenttemplates/search": {
      "post": {
        "tags": ["AppointmentTemplates"],
        "summary": "Get a list of appointment templates",
        "description": "Get a list of templates for online booking by branch-id",
        "operationId": "searchAppointmentTemplatesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/AppointmentTemplateSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«AppointmentTemplate»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articleitems/search": {
      "post": {
        "tags": ["ArticleItems"],
        "summary": "Get a list of articleitems",
        "description": "Get a list of article items  by a search query, paging is used, specify limit and page; Model Type: ArticleItem is returned",
        "operationId": "searchArticleItemsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "articleItemSearchQuery",
            "description": "articleItemSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ArticleItemSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«ArticleItem»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articleitems/stockamounts": {
      "post": {
        "tags": ["ArticleItems"],
        "summary": "Get a list item stock amounts",
        "description": "Stock amount an deliverability per branch",
        "operationId": "searchStockAmountsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/StockAmountSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«StockAmount»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articleitems/stockavailability": {
      "get": {
        "tags": ["ArticleItems"],
        "summary": "Fetches stock amount per branch (shop)",
        "operationId": "getArticleItemsStockAvailabilityPerBranchUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "articleid",
            "in": "query",
            "description": "articleid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/StockAvailability" }
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articleitems/transferitems": {
      "post": {
        "tags": ["ArticleItems"],
        "summary": "transfer article items from one branch to another",
        "description": "Move items from source- to destination branch. If destination status is 'ai_state_stock' items are in stock immediately, else must be excepted by destination branch",
        "operationId": "transferItemsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toTransfer",
            "description": "toTransfer",
            "required": true,
            "schema": { "$ref": "#/definitions/ItemsToTransfer" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articleitems/{id}": {
      "get": {
        "tags": ["ArticleItems"],
        "summary": "Get one specific articleitem by id",
        "operationId": "getArticleItemUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ArticleItem" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articles/detailedsearch": {
      "post": {
        "tags": ["Articles"],
        "summary": "Get a list of detailed articles",
        "description": "Get a list of detailed articles  by a search query, contains more details than /search including properties &amp; images, paging is used, specify limit and page; Model Type: ArticleDetail is returned",
        "operationId": "searchDetailedArticlesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "articleSearchQuery",
            "description": "articleSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ArticleSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«ArticleDetail»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articles/orderbyfields": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get possible fields for orderby of article fields",
        "operationId": "getArticleOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articles/salesprices/search": {
      "post": {
        "tags": ["Articles"],
        "summary": "Get a list of article sales prices",
        "description": "Get a list of sales prices by a search query, paging is used, specify limit and page; Model Type: SalesPrice is returned",
        "operationId": "searchSalesPricesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/SalesPriceSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«SalesPrice»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articles/search": {
      "post": {
        "tags": ["Articles"],
        "summary": "Get a list of articles",
        "description": "Get a list of articles  by a search query, paging is used, specify limit and page; Model Type: ArticleOverview is returned",
        "operationId": "searchArticlesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "articleSearchQuery",
            "description": "articleSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ArticleSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«ArticleOverview»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articles/{articleid}/images/{imageid}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get image of article as blob",
        "operationId": "getArticleImageUsingGET",
        "produces": ["application/octet-stream", "application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "articleid",
            "in": "path",
            "description": "articleid",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageid",
            "in": "path",
            "description": "imageid",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageWidth",
            "in": "query",
            "description": "imageWidth",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "string", "format": "byte" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articles/{id}": {
      "get": {
        "tags": ["Articles"],
        "summary": "Get one specific article detail by id",
        "operationId": "getArticleUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ArticleDetail" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articlevariants/search": {
      "post": {
        "tags": ["ArticleVariants"],
        "summary": "Get a list of article variants",
        "description": "Get a list of article variants  by a search query, paging is used, specify limit and page; Model Type: ArticleVariant is returned",
        "operationId": "searchArticleVariantsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "articlevariantSearchQuery",
            "description": "articlevariantSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ArticleVariantSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«ArticleVariant»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/articlevariants/{id}": {
      "get": {
        "tags": ["ArticleVariants"],
        "summary": "Get one specific article variant by id",
        "operationId": "getArticleVariantUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ArticleVariant" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/audiograms/orderbyfields": {
      "get": {
        "tags": ["Audiograms"],
        "summary": "Get possible fields for orderby of audiogram fields",
        "operationId": "getAudiogramOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/audiograms/search": {
      "post": {
        "tags": ["Audiograms"],
        "summary": "Get a list of audiograms",
        "description": "Get a list of audiograms  by a search query, paging is used, specify limit and page; Model Type: Audiogram is returned",
        "operationId": "searchAudiogramsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "audiogramSearchQuery",
            "description": "audiogramSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/AudiogramSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Audiogram»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/audiograms/{id}": {
      "get": {
        "tags": ["Audiograms"],
        "summary": "Get one specific audiogram by id",
        "operationId": "getAudiogramUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Audiogram" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/availabilities": {
      "post": {
        "tags": ["Availabilities"],
        "summary": "Create a new availability",
        "operationId": "createAvailabilityUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/AvailabilityToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/availabilities/orderbyfields": {
      "get": {
        "tags": ["Availabilities"],
        "summary": "Get possible fields for orderby of availability fields",
        "operationId": "getAvailabilityOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/availabilities/search": {
      "post": {
        "tags": ["Availabilities"],
        "summary": "Get a list of availabilities",
        "description": "Get a list of availabilities by a search query, paging is used, specify limit and page; Model Type: Availability is returned",
        "operationId": "searchAvailabilitiesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "availabilitySearchQuery",
            "description": "availabilitySearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/AvailabilitySearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«Availability»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/availabilities/{id}": {
      "get": {
        "tags": ["Availabilities"],
        "summary": "Get one specific availability by id",
        "operationId": "getAvailabilityUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Availability" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "delete": {
        "tags": ["Availabilities"],
        "summary": "Delete an availability with given id",
        "operationId": "deleteAvailabilityUsingDELETE_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Availabilities"],
        "summary": "Update availability with given id",
        "operationId": "updateAvailabilityUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/AvailabilityToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/axlogin": {
      "post": {
        "tags": ["Login"],
        "summary": "Login with AMPAREX user, password and branchId, use alias from AMPAREX service account. Each consecutive request, other than login, grants a new security-token with a default validity of 60 minutes. Use the new token to avoid expiration. This login can be used to switch branches for a current logged-in AMPAREX user.",
        "operationId": "getSecTokenUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "password",
            "required": true,
            "type": "string"
          },
          {
            "name": "branchid",
            "in": "query",
            "description": "branchid",
            "required": true,
            "type": "string"
          },
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SecurityToken" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/branches/search": {
      "post": {
        "tags": ["Branches"],
        "summary": "Get a list of branches",
        "description": "Get a list of branches by a search query; Model Type: Branch is returned",
        "operationId": "searchBranchesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/BranchSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Branch»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/branches/{id}": {
      "get": {
        "tags": ["Branches"],
        "summary": "Get one specific branch by id",
        "operationId": "getBranchUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Branch" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/brands/search": {
      "post": {
        "tags": ["Brands"],
        "summary": "Get a list of brands",
        "description": "Get a list of brands by a search query, paging is used, specify limit and page; Model Type: Brand is returned",
        "operationId": "searchBrandsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/BrandSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Brand»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/brands/{brandid}/images/{imageid}": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get image of brand as blob",
        "operationId": "getBrandImageUsingGET",
        "produces": ["application/octet-stream", "application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "brandid",
            "in": "path",
            "description": "brandid",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageid",
            "in": "path",
            "description": "imageid",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageWidth",
            "in": "query",
            "description": "imageWidth",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "string", "format": "byte" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/brands/{id}": {
      "get": {
        "tags": ["Brands"],
        "summary": "Get one specific brand by id",
        "operationId": "getBrandUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Brand" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/cashdeskbalances/search": {
      "post": {
        "tags": ["CashDeskBalances"],
        "summary": "Get a list of cashdeskbalances",
        "description": "Get a list of cashdeskbalances  by a search query, paging is used, specify limit and page; Model Type: CashDeskBalance is returned",
        "operationId": "searchCashDeskBalancesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "cashdeskbalanceSearchQuery",
            "description": "cashdeskbalanceSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ApiCashDeskBalanceSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«ApiCashDeskBalance»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/cashdeskbalances/{id}": {
      "get": {
        "tags": ["CashDeskBalances"],
        "summary": "Get one specific cashdeskbalance by id",
        "operationId": "getCashDeskBalanceUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ApiCashDeskBalance" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/changeUser": {
      "post": {
        "tags": ["Login"],
        "summary": "Relogin or change user with pincode, use alias from AMPAREX service account. Each consecutive request, other than login, grants a new security-token with a default validity of 60 minutes. Use the new token to avoid expiration.",
        "operationId": "changeUserUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "pincode",
            "in": "query",
            "description": "pincode",
            "required": true,
            "type": "string"
          },
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SecurityToken" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/colors/search": {
      "post": {
        "tags": ["Colors"],
        "summary": "Get a list of colors",
        "description": "Get a list of colors by a search query, paging is used, specify limit and page; Model Type: Color is returned",
        "operationId": "searchColorsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ColorSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Color»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/colors/{id}": {
      "get": {
        "tags": ["Colors"],
        "summary": "Get one specific color by id",
        "operationId": "getColorUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Color" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/comments": {
      "post": {
        "tags": ["Comments"],
        "summary": "Create a new comment",
        "operationId": "createCommentUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/CommentToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/comments/orderbyfields": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get possible fields for orderby of comment fields",
        "operationId": "getCommentOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/comments/search": {
      "post": {
        "tags": ["Comments"],
        "summary": "Get a list of comments",
        "description": "Get a list of comments  by a search query, paging is used, specify limit and page; Model Type: Comment is returned",
        "operationId": "searchCommentsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "commentSearchQuery",
            "description": "commentSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/CommentSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Comment»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/comments/{id}": {
      "get": {
        "tags": ["Comments"],
        "summary": "Get one specific comment by id",
        "operationId": "getCommentUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Comment" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "delete": {
        "tags": ["Comments"],
        "summary": "Delete a comment with given id",
        "operationId": "deleteCommentUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Comments"],
        "summary": "Update comment with given id",
        "operationId": "updateCommentUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/CommentToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/companies/search": {
      "post": {
        "tags": ["Companies"],
        "summary": "Get a list of companies",
        "description": "Get a list of companies by a search query, paging is used, specify limit and page; Model Type: Company is returned",
        "operationId": "searchCompaniesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/CompanySearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Company»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/companies/{id}": {
      "get": {
        "tags": ["Companies"],
        "summary": "Get one specific company by id",
        "operationId": "getCompanyUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Company" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/contactlenses": {
      "post": {
        "tags": ["ContactLenses"],
        "summary": "Create a new contactlense process",
        "operationId": "createContactLenseUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/ContactLenseToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/contactlenses/search": {
      "post": {
        "tags": ["ContactLenses"],
        "summary": "Get a list of contactlenses",
        "description": "Get a list of contactlenses  by a search query, paging is used, specify limit and page; Model Type: ContactLense is returned",
        "operationId": "searchContactLensesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "contactlenseSearchQuery",
            "description": "contactlenseSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ContactLenseSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«ContactLense»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/contactlenses/{id}": {
      "get": {
        "tags": ["ContactLenses"],
        "summary": "Get one specific contactlense by id",
        "operationId": "getContactLenseUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ContactLense" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers": {
      "post": {
        "tags": ["Customers"],
        "summary": "Create a new customer",
        "operationId": "createCustomerUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/CustomerToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers/orderbyfields": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get possible fields for orderby of customer fields",
        "operationId": "getCustomerOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers/search": {
      "post": {
        "tags": ["Customers"],
        "summary": "Get a list of customers",
        "description": "Get a list of customers  by a search query, paging is used, specify limit and page; Model Type: Customer is returned",
        "operationId": "searchCustomersUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "customerSearchQuery",
            "description": "customerSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/CustomerSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Customer»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers/{cid}/documents/{did}": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get one specfic document by id (without binary)",
        "operationId": "getDocumentUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "path",
            "description": "cid",
            "required": true,
            "type": "string"
          },
          {
            "name": "did",
            "in": "path",
            "description": "did",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Document" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Customers"],
        "summary": "Update document with given id",
        "operationId": "updateDocumentUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "path",
            "description": "cid",
            "required": true,
            "type": "string"
          },
          {
            "name": "did",
            "in": "path",
            "description": "did",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/DocumentToSave" }
          }
        ],
        "responses": {
          "200": { "description": "Ok - Operation successful" },
          "201": { "description": "Created" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers/{cid}/documents/{did}/binary": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get document of customer as blob",
        "operationId": "getDocumentBinaryUsingGET",
        "produces": ["application/octet-stream", "application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "cid",
            "in": "path",
            "description": "cid",
            "required": true,
            "type": "string"
          },
          {
            "name": "did",
            "in": "path",
            "description": "did",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageWidth",
            "in": "query",
            "description": "imageWidth",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "string", "format": "byte" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers/{id}": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get one specific customer by id",
        "operationId": "getCustomerUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Customer" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Customers"],
        "summary": "Update customer with given id",
        "operationId": "updateCustomerUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/CustomerToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers/{id}/documents": {
      "post": {
        "tags": ["Customers"],
        "summary": "Create a new document for customer archive",
        "operationId": "createDocumentUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/DocumentToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers/{id}/documents/search": {
      "post": {
        "tags": ["Customers"],
        "summary": "Get a list of customer documents (without binary)",
        "description": "Get a list of customer documents  by a search query, paging is used, specify limit and page; Model Type: Documents is returned. Document is a wrapper, use id with documents/{id}/binary to get document binary itself ",
        "operationId": "searchDocumentsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/DocumentSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Document»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/customers/{id}/marketingcontacts": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get marketingcontacts for specific customer",
        "operationId": "getMarketingContactsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«MarketingContact»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/deliveries/orderbyfields": {
      "get": {
        "tags": ["Deliveries"],
        "summary": "Get possible fields for orderby of delivery fields",
        "operationId": "getDeliveryOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/deliveries/search": {
      "post": {
        "tags": ["Deliveries"],
        "summary": "Get a list of deliveries",
        "description": "Get a list of deliveries  by a search query, paging is used, specify limit and page; Model Type: Delivery is returned",
        "operationId": "searchDeliveriesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deliverySearchQuery",
            "description": "deliverySearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/DeliverySearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Delivery»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/deliveries/{id}": {
      "get": {
        "tags": ["Deliveries"],
        "summary": "Get one specific delivery by id",
        "operationId": "getDeliveryUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Delivery" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/doctors/orderbyfields": {
      "get": {
        "tags": ["Doctors"],
        "summary": "Get possible fields for orderby of doctor fields",
        "operationId": "getDoctorOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/doctors/search": {
      "post": {
        "tags": ["Doctors"],
        "summary": "Get a list of doctors",
        "description": "Get a list of doctors  by a search query, paging is used, specify limit and page; Model Type: Doctor is returned",
        "operationId": "searchDoctorsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "doctorSearchQuery",
            "description": "doctorSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/DoctorSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Doctor»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/doctors/{id}": {
      "get": {
        "tags": ["Doctors"],
        "summary": "Get one specific doctor by id",
        "operationId": "getDoctorUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Doctor" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/documnettemplates/search": {
      "post": {
        "tags": ["DocumentTemplates"],
        "summary": "Get a list of document templates",
        "description": "Get a list of document templates by a search query, paging is used, specify limit and page; Model Type: DocumentTemplate is returned",
        "operationId": "searchDocumentTemplatesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/DocumentTemplateSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«DocumentTemplate»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/glasses/search": {
      "post": {
        "tags": ["Glasses"],
        "summary": "Get a list of glasses",
        "description": "Get a list of glasses  by a search query, paging is used, specify limit and page; Model Type: Glasses is returned",
        "operationId": "searchGlassessUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "glassesSearchQuery",
            "description": "glassesSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/GlassesSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«GlassesCare»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/glasses/{id}": {
      "get": {
        "tags": ["Glasses"],
        "summary": "Get one specific glasses by id",
        "operationId": "getGlassesUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/GlassesCare" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/healthinsurance/search": {
      "post": {
        "tags": ["HealthInsurance"],
        "summary": "Get a list of healthinsurances",
        "description": "Get a list of healthinsurances  by a search query, paging is used, specify limit and page; Model Type: HealthInsurance is returned",
        "operationId": "searchHealthInsurancesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "healthinsuranceSearchQuery",
            "description": "healthinsuranceSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/HealthInsuranceSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«HealthInsurance»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/healthinsurance/{id}": {
      "get": {
        "tags": ["HealthInsurance"],
        "summary": "Get one specific healthinsurance by id",
        "operationId": "getHealthInsuranceUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/HealthInsurance" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/hearingcares/orderbyfields": {
      "get": {
        "tags": ["HearingCares"],
        "summary": "Get possible fields for orderby of hearingcare fields",
        "operationId": "getHearingCareOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/hearingcares/search": {
      "post": {
        "tags": ["HearingCares"],
        "summary": "Get a list of hearingcares",
        "description": "Get a list of hearingcares  by a search query, paging is used, specify limit and page; Model Type: HearingCare is returned",
        "operationId": "searchHearingCaresUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "hearingcareSearchQuery",
            "description": "hearingcareSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/HearingCareSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«HearingCare»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/hearingcares/{id}": {
      "get": {
        "tags": ["HearingCares"],
        "summary": "Get one specific hearingcare by id",
        "operationId": "getHearingCareUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/HearingCare" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/invoice/search": {
      "post": {
        "tags": ["Invoices"],
        "summary": "Get a list of invoices",
        "description": "Get a list of invoices  by a search query, paging is used, specify limit and page; Model Type: Invoice is returned",
        "operationId": "searchInvoicesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "invoiceSearchQuery",
            "description": "invoiceSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/InvoiceSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Invoice»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/invoice/{id}": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get one specific invoice by id",
        "operationId": "getInvoiceUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Invoice" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/invoice/{id}/paymentreferences": {
      "get": {
        "tags": ["Invoices"],
        "summary": "Get a list of payment references for a given invoice",
        "description": "The payment references for an invoice may depend on the country",
        "operationId": "paymentReferencesUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": { "type": "string" }
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/lenseoptions/search": {
      "post": {
        "tags": ["Lenses"],
        "summary": "Get a list of lenseoptions",
        "description": "Get a list of lenseoptions  by a search query, paging is used, specify limit and page; Model Type: LenseOption is returned",
        "operationId": "searchLenseOptionsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "lenseoptionSearchQuery",
            "description": "lenseoptionSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/LenseOptionSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«LenseOptions»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/lenseoptions/{id}": {
      "get": {
        "tags": ["Lenses"],
        "summary": "Get one specific lenseoption by id",
        "operationId": "getLenseOptionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/LenseOptions" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/lensetypes/search": {
      "post": {
        "tags": ["Lenses"],
        "summary": "Get a list of lensetypes",
        "description": "Get a list of lensetypes  by a search query, paging is used, specify limit and page; Model Type: LenseType is returned",
        "operationId": "searchLenseTypesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "lensetypeSearchQuery",
            "description": "lensetypeSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/LenseTypeSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«LenseType»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/lensetypes/{id}": {
      "get": {
        "tags": ["Lenses"],
        "summary": "Get one specific lensetype by id",
        "operationId": "getLenseTypeUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/LenseType" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/logout": {
      "post": {
        "tags": ["Login"],
        "summary": "Logout, invalidate security token",
        "operationId": "invalidateSecTokenUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/mainversions/orderbyfields": {
      "get": {
        "tags": ["MainVersions"],
        "summary": "Get possible fields for orderby of mainversion fields",
        "operationId": "getMainVersionOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/mainversions/search": {
      "post": {
        "tags": ["MainVersions"],
        "summary": "Get a list of mainversions",
        "description": "Get a list of mainversions  by a search query, paging is used, specify limit and page; Model Type: MainVersion is returned",
        "operationId": "searchMainVersionsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "mainversionSearchQuery",
            "description": "mainversionSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/MainVersionSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«MainVersion»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/mainversions/{id}": {
      "get": {
        "tags": ["MainVersions"],
        "summary": "Get one specific mainversion by id",
        "operationId": "getMainVersionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/MainVersion" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingactions/orderbyfields": {
      "get": {
        "tags": ["MarketingActions"],
        "summary": "Get possible fields for orderby of marketingaction fields",
        "operationId": "getMarketingActionOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingactions/search": {
      "post": {
        "tags": ["MarketingActions"],
        "summary": "Get a list of marketingactions",
        "description": "Get a list of marketingactions  by a search query, paging is used, specify limit and page; Model Type: MarketingAction is returned",
        "operationId": "searchMarketingActionsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "marketingactionSearchQuery",
            "description": "marketingactionSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/MarketingActionSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«MarketingAction»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingactions/{id}": {
      "get": {
        "tags": ["MarketingActions"],
        "summary": "Get one specific marketingaction by id",
        "operationId": "getMarketingActionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/MarketingAction" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingcampaigns/orderbyfields": {
      "get": {
        "tags": ["MarketingCampaigns"],
        "summary": "Get possible fields for orderby of marketingcampaign fields",
        "operationId": "getMarketingCampaignOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingcampaigns/search": {
      "post": {
        "tags": ["MarketingCampaigns"],
        "summary": "Get a list of marketingcampaigns",
        "description": "Get a list of marketingcampaigns  by a search query, paging is used, specify limit and page; Model Type: MarketingCampaign is returned",
        "operationId": "searchMarketingCampaignsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "marketingcampaignSearchQuery",
            "description": "marketingcampaignSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/MarketingCampaignSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«MarketingCampaign»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingcampaigns/{id}": {
      "get": {
        "tags": ["MarketingCampaigns"],
        "summary": "Get one specific marketingcampaign by id",
        "operationId": "getMarketingCampaignUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/MarketingCampaign" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingcontacts/orderbyfields": {
      "get": {
        "tags": ["MarketingContacts"],
        "summary": "Get possible fields for orderby of marketingcontact fields",
        "operationId": "getMarketingContactOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingcontacts/search": {
      "post": {
        "tags": ["MarketingContacts"],
        "summary": "Get a list of marketingcontacts",
        "description": "Get a list of marketingcontacts  by a search query, paging is used, specify limit and page; Model Type: MarketingContact is returned",
        "operationId": "searchMarketingContactsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "marketingcontactSearchQuery",
            "description": "marketingcontactSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/MarketingContactSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«MarketingContact»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/marketingcontacts/{id}": {
      "get": {
        "tags": ["MarketingContacts"],
        "summary": "Get one specific marketingcontact by id",
        "operationId": "getMarketingContactUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/MarketingContact" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/orders/search": {
      "post": {
        "tags": ["Orders"],
        "summary": "Get a list of orders",
        "description": "Get a list of orders  by a search query, paging is used, specify limit and page; Model Type: Order is returned",
        "operationId": "searchOrdersUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "orderSearchQuery",
            "description": "orderSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/OrderSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Order»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/orders/{id}": {
      "get": {
        "tags": ["Orders"],
        "summary": "Get one specific order by id",
        "operationId": "getOrderUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Order" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/principals": {
      "post": {
        "tags": ["Principals"],
        "summary": "Create a new principal",
        "operationId": "createPrincipalUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/PrincipalToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/principals/search": {
      "post": {
        "tags": ["Principals"],
        "summary": "Get a list of principals",
        "description": "Get a list of principals  by a search query, paging is used, specify limit and page; Model Type: Principal is returned",
        "operationId": "searchPrincipalsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "principalSearchQuery",
            "description": "principalSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/PrincipalSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Principal»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/principals/{id}": {
      "get": {
        "tags": ["Principals"],
        "summary": "Get one specific principal by id",
        "operationId": "getPrincipalUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Principal" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "delete": {
        "tags": ["Principals"],
        "summary": "Delete a principal with given id",
        "operationId": "deletePrincipalUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Principals"],
        "summary": "Update principal with given id",
        "operationId": "updatePrincipalUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/PrincipalToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/programmoves/search": {
      "post": {
        "tags": ["Programs"],
        "summary": "Get a list of program moves",
        "description": "Get a list of program moves by a search query, paging is used, specify limit and page; Model Type: ProgramMove is returned",
        "operationId": "searchProgramMovesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "moveSearchQuery",
            "description": "moveSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ProgramMoveSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«ProgramMove»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/properties/articletypes/search": {
      "post": {
        "tags": ["Properties"],
        "summary": "Get possible values for article type",
        "operationId": "searchArticleTypesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ArticleTypeSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/ArticleType" }
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/properties/predefinedproperties/search": {
      "post": {
        "tags": ["Properties"],
        "summary": "Get a list of predefined properties",
        "description": "Get a list of predefined properties by search query, paging is used, specify limit and page; Model Type: PredefinedProperty is returned",
        "operationId": "searchPredefinedPropertiesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/PredefinedPropertySearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«PredefinedProperty»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/properties/predefinedproperties/{id}": {
      "get": {
        "tags": ["Properties"],
        "summary": "Get one predefinedProperty by id",
        "operationId": "getPredefinedPropertyUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/PredefinedProperty" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/properties/propertytypes/categories": {
      "get": {
        "tags": ["Properties"],
        "summary": "Get possible values for category of propertytype",
        "operationId": "findAllCategoriesUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/properties/propertytypes/search": {
      "post": {
        "tags": ["Properties"],
        "summary": "Get a list of property types",
        "description": "Get a list of property types by search query, paging is used, specify limit and page; Model Type: PropertyType is returned",
        "operationId": "searchPropertyTypesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/PropertyTypeSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«PropertyType»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/properties/propertytypes/{id}": {
      "get": {
        "tags": ["Properties"],
        "summary": "Get one propertytype by id",
        "operationId": "getPropertyTypeUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/PropertyType" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/resources": {
      "post": {
        "tags": ["Resources"],
        "summary": "Create a new resource",
        "operationId": "createResourceUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/ResourceToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/resources/search": {
      "post": {
        "tags": ["Resources"],
        "summary": "Get a list of resources",
        "description": "Get a list of resources  by a search query, paging is used, specify limit and page; Model Type: Resource is returned",
        "operationId": "searchResourcesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "resourceSearchQuery",
            "description": "resourceSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ResourceSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Resource»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/resources/{id}": {
      "get": {
        "tags": ["Resources"],
        "summary": "Get one specific resource by id",
        "operationId": "getResourceUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Resource" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "delete": {
        "tags": ["Resources"],
        "summary": "Delete a resource with given id, only resources which have no future appointments could be deleted",
        "operationId": "deleteResourceUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Resources"],
        "summary": "Update resource with given id",
        "operationId": "updateResourceUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/ResourceToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/servers/search": {
      "post": {
        "tags": ["Servers"],
        "summary": "Get a list of servers",
        "description": "Get a list of servers  by a search query, paging is used, specify limit and page; Model Type: Server is returned",
        "operationId": "searchServersUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "serverSearchQuery",
            "description": "serverSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ServerSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Server»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/servers/{id}": {
      "get": {
        "tags": ["Servers"],
        "summary": "Get one specific server by id",
        "operationId": "getServerUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Server" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/servicecontracts/orderbyfields": {
      "get": {
        "tags": ["ServiceContracts"],
        "summary": "Get possible fields for orderby of servicecontract fields",
        "operationId": "getServiceContractOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/servicecontracts/search": {
      "post": {
        "tags": ["ServiceContracts"],
        "summary": "Get a list of servicecontracts",
        "description": "Get a list of servicecontracts  by a search query, paging is used, specify limit and page; Model Type: ServiceContract is returned",
        "operationId": "searchServiceContractsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "servicecontractSearchQuery",
            "description": "servicecontractSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ServiceContractSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«ServiceContract»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/servicecontracts/{id}": {
      "get": {
        "tags": ["ServiceContracts"],
        "summary": "Get one specific servicecontract by id",
        "operationId": "getServiceContractUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ServiceContract" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/staffs": {
      "post": {
        "tags": ["Staffs"],
        "summary": "Create a new staff",
        "operationId": "createStaffUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/StaffToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/staffs/search": {
      "post": {
        "tags": ["Staffs"],
        "summary": "Get a list of staffs",
        "description": "Get a list of staffs by a search query; Model Type: Staff is returned",
        "operationId": "searchStaffsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/StaffSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Staff»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/staffs/{id}": {
      "get": {
        "tags": ["Staffs"],
        "summary": "Get one specific staff by id",
        "operationId": "getStaffUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Staff" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Staffs"],
        "summary": "Update staff with given id",
        "operationId": "updateAppointmentUsingPATCH_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/StaffToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/surveys/search": {
      "post": {
        "tags": ["Surveys"],
        "summary": "Get a list of surveys",
        "description": "Get a list of surveys  by a search query, paging is used, specify limit and page; Model Type: Survey is returned",
        "operationId": "searchSurveysUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "surveySearchQuery",
            "description": "surveySearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/SurveySearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Survey»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/surveys/{id}": {
      "get": {
        "tags": ["Surveys"],
        "summary": "Get one specific survey by id",
        "operationId": "getSurveyUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Survey" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/surveytemplates": {
      "post": {
        "tags": ["SurveyTemplates"],
        "summary": "Create a new surveytemplate",
        "operationId": "createSurveyTemplateUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/SurveyTemplateToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/surveytemplates/search": {
      "post": {
        "tags": ["SurveyTemplates"],
        "summary": "Get a list of surveytemplates",
        "description": "Get a list of surveytemplates  by a search query, paging is used, specify limit and page; Model Type: SurveyTemplate is returned",
        "operationId": "searchSurveyTemplatesUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "surveytemplateSearchQuery",
            "description": "surveytemplateSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/SurveyTemplateSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListResultWrapper«SurveyTemplate»"
            }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/surveytemplates/{id}": {
      "get": {
        "tags": ["SurveyTemplates"],
        "summary": "Get one specific surveytemplate by id",
        "operationId": "getSurveyTemplateUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/SurveyTemplate" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "delete": {
        "tags": ["SurveyTemplates"],
        "summary": "Delete a surveytemplate with given id",
        "operationId": "deleteSurveyTemplateUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["SurveyTemplates"],
        "summary": "Update surveytemplate with given id",
        "operationId": "updateSurveyTemplateUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/SurveyTemplateToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/treatments/salesorder": {
      "post": {
        "tags": ["Treatments"],
        "summary": "Create a new sales order",
        "operationId": "createSalesOrderUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/SalesTreatmentToCreate" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/TreatmentCreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/treatments/search": {
      "post": {
        "tags": ["Treatments"],
        "summary": "Get a list of treatments",
        "description": "Get a list of treatments by a search query, paging is used, specify limit and page; Model Type: Treatment is returned",
        "operationId": "searchTreatmentsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "treatmentSearchQuery",
            "description": "treatmentSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/TreatmentSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Treatment»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/treatments/therapeutics/{id}": {
      "get": {
        "tags": ["Treatments"],
        "summary": "Get one specific therapeutics treatment by id",
        "operationId": "getTherapeuticsTreatmentUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/TherapeuticsTreatment" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/treatments/{id}": {
      "get": {
        "tags": ["Treatments"],
        "summary": "Get one specific treatment by id",
        "operationId": "getTreatmentUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Treatment" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/treatments/{id}/doctors": {
      "get": {
        "tags": ["Treatments"],
        "summary": "Get the assigned doctor for the treatment",
        "operationId": "getDoctorForTreatmentUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Doctor" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/treatments/{id}/documents/search": {
      "post": {
        "tags": ["Customers", "Treatments"],
        "summary": "Get a list of treatment documents (without binary)",
        "description": "Get a list of treatment documents by a search query, paging is used, specify limit and page; Model Type: Documents is returned. Document is a wrapper, use id with documents/{id}/binary to get document binary itself ",
        "operationId": "searchDocumentsUsingPOST_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "searchQuery",
            "description": "searchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/DocumentSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Document»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/treatments/{id}/documents/{did}/binary": {
      "get": {
        "tags": ["Documents", "Treatments"],
        "summary": "Get document of treatment as blob",
        "operationId": "getDocumentBinaryUsingGET_1",
        "produces": ["application/octet-stream", "application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "name": "did",
            "in": "path",
            "description": "did",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageWidth",
            "in": "query",
            "description": "imageWidth",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "string", "format": "byte" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/treatments/{id}/invoices": {
      "get": {
        "tags": ["Treatments"],
        "summary": "Get all documents of all types for one specific treatment",
        "operationId": "getTreatmentInvoicesUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Invoice»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions": {
      "post": {
        "tags": ["Versions"],
        "summary": "Create a version",
        "operationId": "createVersionUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "version",
            "description": "version",
            "required": true,
            "schema": { "$ref": "#/definitions/VersionToSave" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/LTS/latest": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get latest LTS-Version",
        "operationId": "getLatestLTSVersionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Version" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/LTS/latest/stable": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get latest stable LTS-Version",
        "operationId": "getLatestStableLTSVersionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Version" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/STS/latest": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get latest STS-Version",
        "operationId": "getLatestSTSVersionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Version" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/STS/latest/stable": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get latest stable STS-Version",
        "operationId": "getLatestStableSTSVersionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Version" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/orderbyfields": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get possible fields for orderby of version fields",
        "operationId": "getVersionOrderByFieldsUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/search": {
      "post": {
        "tags": ["Versions"],
        "summary": "Get a list of versions",
        "description": "Get a list of versions  by a search query, paging is used, specify limit and page; Model Type: Version is returned",
        "operationId": "searchVersionsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "versionSearchQuery",
            "description": "versionSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/VersionSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«Version»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/{id}": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get one specific version by id",
        "operationId": "getVersionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Version" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Versions"],
        "summary": "Update a version",
        "operationId": "updateVersionUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "version",
            "description": "version",
            "required": true,
            "schema": { "$ref": "#/definitions/VersionToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/{mainVersion}/latest": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get latest version for given main version",
        "operationId": "getLatestVersionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "mainVersion",
            "in": "path",
            "description": "may be specified by ID, release type (such as \"LTS\") or main version (such as \"LTS-2020.4\")",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Version" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/versions/{mainVersion}/latest/stable": {
      "get": {
        "tags": ["Versions"],
        "summary": "Get latest stable version for given main version",
        "description": "Main version may be either specified by name or ID",
        "operationId": "getLatestStableVersionUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "mainVersion",
            "in": "path",
            "description": "may be specified by ID, release type (such as \"LTS\") or main version (such as \"LTS-2020.4\")",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/Version" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/views": {
      "post": {
        "tags": ["Views"],
        "summary": "Create a new view",
        "operationId": "createViewUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toSave",
            "description": "toSave",
            "required": true,
            "schema": { "$ref": "#/definitions/ViewToSave" }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": { "$ref": "#/definitions/CreationResponse" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/views/search": {
      "post": {
        "tags": ["Views"],
        "summary": "Get a list of views",
        "description": "Get a list of views  by a search query, paging is used, specify limit and page; Model Type: View is returned",
        "operationId": "searchViewsUsingPOST",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "viewSearchQuery",
            "description": "viewSearchQuery",
            "required": true,
            "schema": { "$ref": "#/definitions/ViewSearchQuery" }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/ListResultWrapper«View»" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/views/{id}": {
      "get": {
        "tags": ["Views"],
        "summary": "Get one specific view by id",
        "operationId": "getViewUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/View" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "delete": {
        "tags": ["Views"],
        "summary": "Delete a view with given id",
        "operationId": "deleteViewUsingDELETE",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      },
      "patch": {
        "tags": ["Views"],
        "summary": "Update view with given id",
        "operationId": "updateViewUsingPATCH",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "toUpdate",
            "description": "toUpdate",
            "required": true,
            "schema": { "$ref": "#/definitions/ViewToSave" }
          }
        ],
        "responses": {
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" },
          "422": {
            "description": "Unprocessable Entity - The given entity is not valid for that request"
          }
        },
        "security": [{ "security_token": [] }]
      }
    },
    "/alias/{alias}/protected/whoami": {
      "get": {
        "tags": ["Login"],
        "summary": "Get information about the current userlogin",
        "operationId": "whoAmIUsingGET",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "description": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": { "$ref": "#/definitions/WhoAmI" }
          },
          "401": {
            "description": "Unauthorized - Check security token or credentials"
          },
          "402": {
            "description": "Payment Required - The API has not been activated for the company or the call-limit is exceeded"
          },
          "403": {
            "description": "Forbidden - Not enough permissions for this call"
          },
          "404": { "description": "NotFound - Entity not found" }
        },
        "security": [{ "security_token": [] }]
      }
    }
  },
  "securityDefinitions": {
    "security_token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Address": {
      "type": "object",
      "properties": {
        "aboveName": { "type": "string" },
        "belowName": { "type": "string" },
        "city": { "type": "string" },
        "comment": { "type": "string" },
        "countryCode": { "type": "string" },
        "countryName": { "type": "string" },
        "email": { "type": "string" },
        "id": { "type": "string" },
        "line1": { "type": "string" },
        "line2": { "type": "string" },
        "line3": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "ownerId": { "type": "string" },
        "phone1": { "type": "string" },
        "phone1_sms": { "type": "boolean" },
        "phone2": { "type": "string" },
        "phone2_sms": { "type": "boolean" },
        "phone3": { "type": "string" },
        "phone3_sms": { "type": "boolean" },
        "relatedType": { "type": "string" },
        "replaceName": { "type": "string" },
        "street": { "type": "string" },
        "type": { "$ref": "#/definitions/TranslatedString" },
        "web": {
          "type": "string",
          "description": "A URL",
          "allowEmptyValue": false
        },
        "zip": { "type": "string" }
      },
      "title": "Address",
      "description": "Detailed information about an address"
    },
    "AddressSearchQuery": {
      "type": "object",
      "properties": {
        "addressType": { "type": "string" },
        "city": { "type": "string" },
        "email": { "type": "string" },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches addresses that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches addresses that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use customer/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "ownerId": { "type": "string" },
        "phone1": { "type": "string" },
        "phone2": { "type": "string" },
        "relatedType": {
          "type": "string",
          "description": "Related Type of person (B = branch,S = staff,Y = ???,H = ???,C = Customer,D = doctor,X = ???)",
          "allowEmptyValue": false
        },
        "street": { "type": "string" },
        "web": {
          "type": "string",
          "description": "A URL",
          "allowEmptyValue": false
        },
        "zip": { "type": "string" }
      },
      "title": "AddressSearchQuery",
      "description": "Search query used to filter addresss"
    },
    "AddressToSave": {
      "type": "object",
      "properties": {
        "aboveName": {
          "type": "string",
          "description": "Extra address line on top of name",
          "allowEmptyValue": false
        },
        "addressType": {
          "type": "string",
          "example": "address_residence",
          "description": "The type of address (address_residence,address_residence_old,address_residence2,address_delivery,address_billing)",
          "allowEmptyValue": false
        },
        "belowName": {
          "type": "string",
          "example": "CC Miller",
          "description": "Extra address line below the name",
          "allowEmptyValue": false
        },
        "city": {
          "type": "string",
          "example": "Leinfelden-Echterdingen",
          "description": "City or location",
          "allowEmptyValue": false
        },
        "comment": {
          "type": "string",
          "description": "optional comment on address",
          "allowEmptyValue": false
        },
        "countryCode": {
          "type": "string",
          "example": "DE",
          "description": "ISO country code alpha-2",
          "allowEmptyValue": false
        },
        "email": {
          "type": "string",
          "example": "info@amparex.com",
          "description": "E-Mail address",
          "allowEmptyValue": false
        },
        "line1": {
          "type": "string",
          "description": "Extra address line between name and address (used in UK)",
          "allowEmptyValue": false
        },
        "line2": {
          "type": "string",
          "description": "Extra address line between name and address (used in UK)",
          "allowEmptyValue": false
        },
        "line3": {
          "type": "string",
          "description": "Extra address line between name and address (used in UK)",
          "allowEmptyValue": false
        },
        "ownerId": {
          "type": "string",
          "example": "0114ee9723da000000ea005056C00008",
          "description": "The owner person (customer, company ...) ID of which the address belongs to or leave empty to modify an existing address. You can not change the owner ID of an existing address in the database",
          "allowEmptyValue": false
        },
        "phone1": {
          "type": "string",
          "example": "+49 (0) 711 21 475 - 475",
          "description": "Phone number 1",
          "allowEmptyValue": false
        },
        "phone1SMS": {
          "type": "boolean",
          "example": true,
          "description": "allow sending SMS to phone number 1",
          "allowEmptyValue": false
        },
        "phone2": {
          "type": "string",
          "example": "+49 (0) 711 21 475 - 475",
          "description": "Phone number 2",
          "allowEmptyValue": false
        },
        "phone2SMS": {
          "type": "boolean",
          "example": false,
          "description": "allow sending SMS to phone number 2",
          "allowEmptyValue": false
        },
        "phone3": {
          "type": "string",
          "example": "+49 (0) 711 21 475 - 475",
          "description": "Phone number 3",
          "allowEmptyValue": false
        },
        "phone3SMS": {
          "type": "boolean",
          "example": false,
          "description": "allow sending SMS to phone number 3",
          "allowEmptyValue": false
        },
        "replaceName": {
          "type": "string",
          "description": "Address line used instead of person name",
          "allowEmptyValue": false
        },
        "street": {
          "type": "string",
          "example": "Max-Lang-Straße 24",
          "description": "Street name including house number",
          "allowEmptyValue": false
        },
        "web": {
          "type": "string",
          "example": "www.amparex.com",
          "description": "Web address / homepage",
          "allowEmptyValue": false
        },
        "zip": {
          "type": "string",
          "example": 70771,
          "description": "Postal ZIP code",
          "allowEmptyValue": false
        }
      },
      "title": "AddressToSave",
      "description": "DTO to save an address."
    },
    "ApiArticleItemOverview": {
      "type": "object",
      "properties": {
        "articleColorID": { "type": "string" },
        "articleItemID": { "type": "string" },
        "articleType": { "$ref": "#/definitions/TranslatedString" },
        "articleVariantID": { "type": "string" },
        "brandID": { "type": "string" },
        "colorCode": { "type": "string" },
        "customerGuarantyDuration": { "type": "integer", "format": "int32" },
        "customerGuarantyStart": { "type": "string", "format": "date" },
        "customerID": { "type": "string" },
        "description": { "type": "string" },
        "externalItemNr": { "type": "string" },
        "id": { "type": "string" },
        "invoicePositionDescription": { "type": "string" },
        "issueDate": { "type": "string", "format": "date" },
        "itemNr": { "type": "string" },
        "maxReturnDate": { "type": "string", "format": "date" },
        "name": { "type": "string" },
        "owner": { "$ref": "#/definitions/TranslatedString" },
        "posNr1": { "type": "string" },
        "producerID": { "type": "string" },
        "salesPrice": { "type": "number" },
        "searchExternalItemNr": { "type": "string" },
        "size": { "type": "string" },
        "state": { "$ref": "#/definitions/TranslatedString" },
        "stockAmount": { "type": "number" },
        "stockID": { "type": "string" },
        "stockUnit": { "$ref": "#/definitions/TranslatedString" },
        "supplierGuarantyDuration": { "type": "integer", "format": "int32" },
        "supplierGuarantyStart": { "type": "string", "format": "date" }
      },
      "title": "ApiArticleItemOverview",
      "description": "ArticleItem Overview with limited article information. Combines data from articleItem and article."
    },
    "ApiCashDeskBalance": {
      "type": "object",
      "properties": {
        "amount": { "type": "number" },
        "branch": { "$ref": "#/definitions/BranchReduced" },
        "id": { "type": "string" },
        "name": { "type": "string" }
      },
      "title": "ApiCashDeskBalance"
    },
    "ApiCashDeskBalanceSearchQuery": {
      "type": "object",
      "properties": {
        "branchId": { "type": "string" },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" }
      },
      "title": "ApiCashDeskBalanceSearchQuery"
    },
    "ApiCompanyCustomerNumber": {
      "type": "object",
      "properties": {
        "branchId": { "type": "string" },
        "customerNumber": { "type": "string" }
      },
      "title": "ApiCompanyCustomerNumber"
    },
    "ApiServiceContractInterval": {
      "type": "object",
      "properties": {
        "accountingDate": { "type": "string", "format": "date" },
        "amount": { "type": "number" },
        "endDate": { "type": "string", "format": "date" },
        "notice": { "type": "string" },
        "paymentPurpose": { "type": "string" },
        "price": { "type": "number" },
        "serviceContractID": { "type": "string" },
        "startDate": { "type": "string", "format": "date" },
        "state": { "$ref": "#/definitions/TranslatedString" },
        "totalGross": { "type": "number" },
        "type": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "ApiServiceContractInterval"
    },
    "ApplicationType": {
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "description": "name of the application types with technical key and translation",
          "allowEmptyValue": false,
          "items": { "$ref": "#/definitions/TranslatedString" }
        },
        "value": {
          "type": "integer",
          "format": "int64",
          "description": "Value of the application type, e.g. used in search queries",
          "allowEmptyValue": false
        }
      },
      "title": "ApplicationType",
      "description": "Information about application types."
    },
    "Appointment": {
      "type": "object",
      "properties": {
        "branchID": { "type": "string" },
        "canceled": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether an appointment has been cancelled",
          "allowEmptyValue": false
        },
        "comment": { "type": "string" },
        "creation": {
          "type": "string",
          "format": "date-time",
          "description": "The technical creation date for this appointment",
          "allowEmptyValue": false
        },
        "customerID": { "type": "string" },
        "date": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "allowEmptyValue": false
        },
        "endTime": {
          "type": "string",
          "example": "12:34:56",
          "allowEmptyValue": true
        },
        "homeVisit": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether an appointment is marked as homeVisit",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "postMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The post preparation time for this appointment",
          "allowEmptyValue": false
        },
        "prepareMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The preparation time for this appointment",
          "allowEmptyValue": false
        },
        "resources": {
          "type": "array",
          "description": "A list of resources for this appointment",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/Resource" }
        },
        "startTime": {
          "type": "string",
          "example": "12:34:56",
          "allowEmptyValue": true
        },
        "status": {
          "description": "Describes the status of the appointment",
          "allowEmptyValue": true,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        },
        "text": { "type": "string" },
        "treatmentID": { "type": "string" },
        "type": {
          "description": "Describes the type of the appointment",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        },
        "wholeDay": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether an appointment is sheduled for the whole day",
          "allowEmptyValue": false
        }
      },
      "title": "Appointment",
      "description": "Detailed information about one appointment"
    },
    "Appointment planner": {
      "type": "object",
      "properties": {
        "scheduledEndDate": {
          "type": "string",
          "format": "date",
          "example": "2020-01-01",
          "description": "The date until recurring appointments and availabilities are preset",
          "allowEmptyValue": false
        }
      },
      "title": "Appointment planner",
      "description": "Holds general information of the appointment planner"
    },
    "AppointmentFreeBusySearchQuery": {
      "type": "object",
      "properties": {
        "branchID": {
          "type": "string",
          "description": "branch to find slots for",
          "allowEmptyValue": true
        },
        "durationMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "find availabilities with given minimum duration only",
          "allowEmptyValue": true
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "end date for search, default equals to start",
          "allowEmptyValue": true
        },
        "endTime": {
          "type": "string",
          "description": "generate slots until at given time per day",
          "allowEmptyValue": true
        },
        "freeSlotsOnly": {
          "type": "boolean",
          "example": false,
          "description": "if true busy slots are not sent (only free-slots)",
          "allowEmptyValue": true
        },
        "onlineBooking": {
          "type": "boolean",
          "example": false,
          "description": "find slots for online booking",
          "allowEmptyValue": true
        },
        "resourceIDs": {
          "type": "array",
          "description": "if not null, this resource is requested for free/busy slots",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "sliceFreeSlots": {
          "type": "boolean",
          "example": false,
          "description": "deliver free slots in pieces of bookable entries",
          "allowEmptyValue": true
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "start date for search, default today",
          "allowEmptyValue": true
        },
        "startTime": {
          "type": "string",
          "description": "generate slots staring at given time per day",
          "allowEmptyValue": true
        },
        "stepMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "generate slots with multiples of given step size",
          "allowEmptyValue": true
        },
        "templateID": {
          "type": "string",
          "description": "appointment template to search slots for",
          "allowEmptyValue": true
        }
      },
      "title": "AppointmentFreeBusySearchQuery",
      "description": "Search free/busy time slots for appointments"
    },
    "AppointmentSearchQuery": {
      "type": "object",
      "properties": {
        "branchID": {
          "type": "string",
          "description": "appointments for specified branchID",
          "allowEmptyValue": true
        },
        "customerID": {
          "type": "string",
          "description": "appointments for specified customerID",
          "allowEmptyValue": true
        },
        "endTime": {
          "type": "string",
          "example": "14:34:56",
          "description": "appointments that end before specified time (inclusive)",
          "allowEmptyValue": true
        },
        "fromDate": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "appointments from specified date (inclusive)",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches appointments that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches appointments that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use appointment/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "resourceIDs": {
          "type": "array",
          "description": "appointments using specified resources (logically and)",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "startTime": {
          "type": "string",
          "example": "12:34:56",
          "description": "appointments that start after specified time (inclusive)",
          "allowEmptyValue": true
        },
        "statusID": {
          "type": "string",
          "description": "appointments with specified status via PredefinedPropertyID",
          "allowEmptyValue": true
        },
        "toDate": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "appointments to specified date (inclusive)",
          "allowEmptyValue": true
        },
        "treatmentID": {
          "type": "string",
          "description": "appointments for specified treatment",
          "allowEmptyValue": true
        },
        "typeID": {
          "type": "string",
          "description": "appointments with specified type via PredefinedPropertyID",
          "allowEmptyValue": true
        }
      },
      "title": "AppointmentSearchQuery",
      "description": "Search query used to filter appointments"
    },
    "AppointmentSync": {
      "type": "object",
      "properties": {
        "branchID": { "type": "string" },
        "canceled": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether an appointment has been cancelled",
          "allowEmptyValue": false
        },
        "comment": { "type": "string" },
        "creation": {
          "type": "string",
          "format": "date-time",
          "description": "The technical creation date for this appointment",
          "allowEmptyValue": false
        },
        "customer": {
          "description": "Customer information",
          "allowEmptyValue": false,
          "$ref": "#/definitions/CustomerReducedWithEmail"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "allowEmptyValue": false
        },
        "endTime": {
          "type": "string",
          "example": "12:34:56",
          "allowEmptyValue": true
        },
        "homeVisit": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether an appointment is marked as homeVisit",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "isAvailability": {
          "type": "boolean",
          "example": false,
          "description": "Is availabilty (or appointment)",
          "allowEmptyValue": false
        },
        "lastNotification": {
          "type": "string",
          "format": "date-time",
          "description": "Last notification to customer",
          "allowEmptyValue": false
        },
        "postMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The post preparation time for this appointment",
          "allowEmptyValue": false
        },
        "prepareMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "The preparation time for this appointment",
          "allowEmptyValue": false
        },
        "resources": {
          "type": "array",
          "description": "A list of resources for this appointment",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/ResourceReduced" }
        },
        "showAsUnavailable": {
          "type": "boolean",
          "example": false,
          "description": "Is un-available",
          "allowEmptyValue": false
        },
        "startTime": {
          "type": "string",
          "example": "12:34:56",
          "allowEmptyValue": true
        },
        "status": {
          "description": "Describes the status of the appointment",
          "allowEmptyValue": true,
          "$ref": "#/definitions/PredefinedPropertySimple"
        },
        "text": { "type": "string" },
        "treatmentID": { "type": "string" },
        "type": {
          "description": "Describes the type of the appointment",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertySimple"
        },
        "wholeDay": {
          "type": "boolean",
          "example": false,
          "description": "Indicates whether an appointment is sheduled for the whole day",
          "allowEmptyValue": false
        }
      },
      "title": "AppointmentSync",
      "description": "Detailed information about one appointment"
    },
    "AppointmentTemplate": {
      "type": "object",
      "properties": {
        "comment": { "type": "string" },
        "durationMinutes": { "type": "integer", "format": "int32" },
        "externalIdent": { "type": "string" },
        "id": { "type": "string" },
        "name": { "type": "string" },
        "postMinutes": { "type": "integer", "format": "int32" },
        "prepareMinutes": { "type": "integer", "format": "int32" },
        "sorting": { "type": "integer", "format": "int32" }
      },
      "title": "AppointmentTemplate",
      "description": "Templates for appointments"
    },
    "AppointmentTemplateSearchQuery": {
      "type": "object",
      "properties": {
        "branchID": {
          "type": "string",
          "description": "appointment templates for specified branch-id",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "onlineBooking": {
          "type": "boolean",
          "example": false,
          "description": "find templates for online booking",
          "allowEmptyValue": true
        }
      },
      "title": "AppointmentTemplateSearchQuery",
      "description": "Search query used to filter appointment templates"
    },
    "AppointmentToSave": {
      "type": "object",
      "properties": {
        "allowParallel": {
          "type": "boolean",
          "example": false,
          "description": "Determines whether this appointment is an parallel appointment",
          "allowEmptyValue": false
        },
        "canceled": {
          "type": "boolean",
          "example": false,
          "description": "Determines whether this appointment is canceled",
          "allowEmptyValue": false
        },
        "comment": {
          "type": "string",
          "description": "Comment of the appointment",
          "allowEmptyValue": false
        },
        "customer": {
          "description": "customer data to find or create and assign to appointment",
          "allowEmptyValue": false,
          "$ref": "#/definitions/CustomerToSave"
        },
        "customerID": {
          "type": "string",
          "description": "The customer for this appointment, use customer id of table customer here, nullable",
          "allowEmptyValue": false
        },
        "date": {
          "type": "string",
          "example": "2007-03-27",
          "description": "date of the appointment - current date is used when omitted",
          "allowEmptyValue": false
        },
        "endTime": {
          "type": "string",
          "example": "14:46:46",
          "description": "ending time of the availability",
          "allowEmptyValue": false
        },
        "homeVisit": {
          "type": "boolean",
          "example": false,
          "description": "Determines whether this appointment is a home visit appointment",
          "allowEmptyValue": false
        },
        "marketingActionID": {
          "type": "string",
          "description": "marketing action id to create a marketing contact",
          "allowEmptyValue": false
        },
        "postMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "PostMinutes of the appointment",
          "allowEmptyValue": false
        },
        "prepareMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "Preparation time for the appointment",
          "allowEmptyValue": false
        },
        "resourceIDs": {
          "type": "string",
          "example": ["ID1", "ID2"],
          "description": "resourceIDs for this appointment",
          "allowEmptyValue": false
        },
        "showAsUnavailable": {
          "type": "boolean",
          "example": false,
          "description": "Determines whether the resource is marked as \"available\" for this appointment",
          "allowEmptyValue": false
        },
        "startTime": {
          "type": "string",
          "example": "14:46:46",
          "description": "starting time of the appointment",
          "allowEmptyValue": false
        },
        "statusID": {
          "type": "string",
          "description": "PredefinedPropertyID of appointment status",
          "allowEmptyValue": false
        },
        "text": {
          "type": "string",
          "description": "text that is to be displayed for this appointment",
          "allowEmptyValue": false
        },
        "treatmentHeadID": {
          "type": "string",
          "description": "TreatmentHeadID of customer",
          "allowEmptyValue": false
        },
        "typeID": {
          "type": "string",
          "description": "PredefinedPropertyID of appointment type",
          "allowEmptyValue": false
        },
        "useBranchID": {
          "type": "string",
          "description": "BranchID of the appointment - callerBranch is used when omitted",
          "allowEmptyValue": false
        },
        "wholeDay": {
          "type": "boolean",
          "example": false,
          "description": "Determines whether the duration of the appointment is the whole day",
          "allowEmptyValue": false
        }
      },
      "title": "AppointmentToSave",
      "description": "DTO to save an appointment"
    },
    "ArticleDetail": {
      "type": "object",
      "properties": {
        "amparexIdent": { "type": "string" },
        "articleNr": { "type": "string" },
        "articleType": {
          "description": "Type of the article, linked to table predefined property",
          "allowEmptyValue": false,
          "$ref": "#/definitions/ArticleTypeReduced"
        },
        "baseColorName": {
          "type": "string",
          "description": "Base color, related to the producer color, like \"white\"",
          "allowEmptyValue": true
        },
        "baseColorRGBCode": {
          "type": "string",
          "description": "Base RGB hex color code in format #RRGGBB",
          "allowEmptyValue": true
        },
        "brandID": { "type": "string" },
        "brandName": { "type": "string" },
        "brandShortName": { "type": "string" },
        "colorCode": { "type": "string" },
        "colorName": {
          "type": "string",
          "description": "Producer name of the color, like \"sandy beach\"",
          "allowEmptyValue": true
        },
        "colorRGBCode": {
          "type": "string",
          "description": "RGB hex color code in format #RRGGBB",
          "allowEmptyValue": true
        },
        "deliverableFrom": { "type": "string", "format": "date" },
        "deliveryState": { "$ref": "#/definitions/TranslatedString" },
        "description": { "type": "string" },
        "ean": {
          "type": "string",
          "description": "EAN/GTIN of the article",
          "allowEmptyValue": true
        },
        "frameLength": { "type": "string" },
        "id": { "type": "string" },
        "images": {
          "type": "array",
          "items": { "$ref": "#/definitions/Image" }
        },
        "invoicePositionDescription": { "type": "string" },
        "mainImageURL": { "type": "string" },
        "manufacturerIdent": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "msrp": { "type": "number" },
        "name": { "type": "string" },
        "outputAmount": {
          "type": "number",
          "description": "how many stock units of this article are usually sold, eg. batteries sold as a pack of 6 by default",
          "allowEmptyValue": false
        },
        "preferredOrderOwnerType": { "$ref": "#/definitions/TranslatedString" },
        "procurements": {
          "type": "array",
          "items": { "$ref": "#/definitions/Procurement" }
        },
        "producerID": { "type": "string" },
        "producerName": { "type": "string" },
        "producerShortName": { "type": "string" },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/ArticleProperty" }
        },
        "salesPrice": { "type": "number" },
        "similarArticles": { "type": "string" },
        "size": { "type": "string" },
        "stockManagementType": { "type": "string" },
        "stockUnit": {
          "description": "unit of measurement used to determine article amount, e.g. pieces, kilograms, hours, etc.",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        },
        "stockUnitAmount": {
          "type": "number",
          "description": "how many stock units make up one entity of this article",
          "allowEmptyValue": false
        },
        "validFrom": { "type": "string", "format": "date" },
        "validTo": { "type": "string", "format": "date" },
        "vatType": { "type": "string" }
      },
      "title": "ArticleDetail",
      "description": "Detailed Article with all article information and properties"
    },
    "ArticleItem": {
      "type": "object",
      "properties": {
        "articleColorID": { "type": "string" },
        "articleID": { "type": "string" },
        "articleVariantID": { "type": "string" },
        "chargeNr": { "type": "string" },
        "customerGuarantyDuration": { "type": "integer", "format": "int32" },
        "customerGuarantyStart": { "type": "string", "format": "date" },
        "customerID": { "type": "string" },
        "description": { "type": "string" },
        "expireDate": { "$ref": "#/definitions/Timestamp" },
        "externalItemNr": { "type": "string" },
        "firstStorageDate": { "type": "string", "format": "date" },
        "id": { "type": "string" },
        "inventoryPrice": { "type": "number" },
        "issueDate": { "type": "string", "format": "date" },
        "itemNr": { "type": "string" },
        "lastSupplierOwnership": { "type": "string" },
        "maxReturnDate": { "type": "string", "format": "date" },
        "owner": { "type": "string" },
        "purchasePrice": { "type": "number" },
        "salesPrice": { "type": "number" },
        "searchExternalItemNr": { "type": "string" },
        "side": { "type": "string" },
        "state": { "type": "string" },
        "stockAmount": { "type": "number" },
        "stockID": { "type": "string" },
        "stockUnit": { "type": "string" },
        "supplierGuarantyDuration": { "type": "integer", "format": "int32" },
        "supplierGuarantyStart": { "type": "string", "format": "date" },
        "visible": { "type": "boolean" }
      },
      "title": "ArticleItem"
    },
    "ArticleItemSearchQuery": {
      "type": "object",
      "properties": {
        "articleColorId": {
          "type": "string",
          "description": "Searches by producer color like \"sandy beach\", see section color, to get id of specific color",
          "allowEmptyValue": true
        },
        "articleId": {
          "type": "string",
          "description": "an article to fetch items for",
          "allowEmptyValue": true
        },
        "articleTypeId": {
          "type": "string",
          "description": "This is a predefined property ID of property type \"propertytype_article_type\"",
          "allowEmptyValue": true
        },
        "branchId": {
          "type": "string",
          "description": "if a branchID is given, article items are related to that branch, else article items are related to login branch",
          "allowEmptyValue": true
        },
        "brandId": {
          "type": "string",
          "description": "Use an id of table brand, see section brand",
          "allowEmptyValue": true
        },
        "customerId": {
          "type": "string",
          "example": "0115124dc15000000003005056C00008",
          "description": "Searches article items by customerID",
          "allowEmptyValue": true
        },
        "ean": {
          "type": "string",
          "description": "Searches by EAN/GTIN, no wildcard search",
          "allowEmptyValue": true
        },
        "externalItemNr": {
          "type": "string",
          "description": "Searches article items by external item Number",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "owner": {
          "type": "array",
          "description": "a list of owners to fetch items for. ai_owner_stock= stock, ai_owner_customer = customer, ai_owner_commission = commission, ai_owner_deleted = deleted, ai_owner_voucher = voucher, ai_owner_borrow = borrow",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "producerId": {
          "type": "string",
          "description": "Searches article items by producerID, see section company",
          "allowEmptyValue": true
        },
        "state": {
          "type": "array",
          "description": "a list of states to fetch items for. ai_state_stock = in stock, ai_state_customer = at the customer, ai_state_repair = under repair, ai_state_transfer = sent, ai_state_rejected = rejected, ai_state_returned = returned, ai_state_repair_intern = internal repair, ai_state_deleted = deleted",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        }
      },
      "title": "ArticleItemSearchQuery",
      "description": "Search query used to filter articleitems"
    },
    "ArticleOverview": {
      "type": "object",
      "properties": {
        "articleNr": { "type": "string" },
        "articleType": {
          "description": "Type of the article, linked to table predefined property",
          "allowEmptyValue": false,
          "$ref": "#/definitions/ArticleTypeReduced"
        },
        "baseColorName": {
          "type": "string",
          "description": "Base color, related to the producer color, like \"white\"",
          "allowEmptyValue": true
        },
        "baseColorRGBCode": {
          "type": "string",
          "description": "Base RGB hex color code in format #RRGGBB",
          "allowEmptyValue": true
        },
        "brandID": { "type": "string" },
        "brandName": { "type": "string" },
        "brandShortName": { "type": "string" },
        "colorCode": { "type": "string" },
        "colorName": {
          "type": "string",
          "description": "Producer name of the color, like \"sandy beach\"",
          "allowEmptyValue": true
        },
        "colorRGBCode": {
          "type": "string",
          "description": "RGB hex color code in format #RRGGBB",
          "allowEmptyValue": true
        },
        "deliverableFrom": { "type": "string", "format": "date" },
        "deliveryState": { "$ref": "#/definitions/TranslatedString" },
        "ean": {
          "type": "string",
          "description": "EAN/GTIN of the article",
          "allowEmptyValue": true
        },
        "frameLength": { "type": "string" },
        "id": { "type": "string" },
        "invoicePositionDescription": { "type": "string" },
        "mainImageURL": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "msrp": { "type": "number" },
        "name": { "type": "string" },
        "outputAmount": {
          "type": "number",
          "description": "how many stock units of this article are usually sold, eg. batteries sold as a pack of 6 by default",
          "allowEmptyValue": false
        },
        "preferredOrderOwnerType": { "$ref": "#/definitions/TranslatedString" },
        "producerID": { "type": "string" },
        "producerName": { "type": "string" },
        "producerShortName": { "type": "string" },
        "salesPrice": { "type": "number" },
        "size": { "type": "string" },
        "stockManagementType": { "type": "string" },
        "stockUnit": {
          "description": "unit of measurement used to determine article amount, e.g. pieces, kilograms, hours, etc.",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        },
        "stockUnitAmount": {
          "type": "number",
          "description": "how many stock units make up one entity of this article",
          "allowEmptyValue": false
        },
        "validFrom": { "type": "string", "format": "date" },
        "validTo": { "type": "string", "format": "date" },
        "vatType": { "type": "string" }
      },
      "title": "ArticleOverview",
      "description": "Article Overview with limited article information, used for overview lists. For detailed article use id and load ArticleDetail "
    },
    "ArticlePropertiesMeta": {
      "type": "object",
      "properties": {
        "operator": {
          "type": "string",
          "description": "Search operator, with which properties are connected in search, must be \"and\" or \"or\", \"and\" is default if missing",
          "allowEmptyValue": true
        },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/SearchPropertyEntry" }
        }
      },
      "title": "ArticlePropertiesMeta",
      "description": "Article properties with search operator"
    },
    "ArticleProperty": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "propertyType": { "$ref": "#/definitions/PropertyType" },
        "value": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "ArticleProperty",
      "description": "Property which describes an article"
    },
    "ArticleSearchQuery": {
      "type": "object",
      "properties": {
        "articleProperties": {
          "description": "Search for articles with given properties, use IDs of table predefined property and property type of category \"category_article\" and \"category_article_frame\"",
          "allowEmptyValue": true,
          "$ref": "#/definitions/ArticlePropertiesMeta"
        },
        "articleTypeID": {
          "type": "string",
          "description": "This is a predefined property ID of property type \"propertytype_article_type\"",
          "allowEmptyValue": true
        },
        "baseColorID": {
          "type": "string",
          "description": "Search for base color like \"white\", see section color, to get id of specific color",
          "allowEmptyValue": true
        },
        "brandID": {
          "type": "string",
          "description": "Use a id of table brand, see section brand",
          "allowEmptyValue": true
        },
        "changedSince": {
          "type": "string",
          "format": "date",
          "example": "2021-01-01",
          "description": "is a date is given, (potentially) changes since then are listed",
          "allowEmptyValue": true
        },
        "colorID": {
          "type": "string",
          "description": "Search for producer color like \"sandy beach\", see section color, to get id of specific color",
          "allowEmptyValue": true
        },
        "ean": {
          "type": "string",
          "description": "Search for EAN/GTIN, no wildcard search",
          "allowEmptyValue": true
        },
        "forSale": {
          "type": "boolean",
          "example": true,
          "description": "if true searches only for articles which are marked for sale, if false all articles which are not marked for alse are found, if empty all articles are found",
          "allowEmptyValue": true
        },
        "forUse": {
          "type": "boolean",
          "example": true,
          "description": "if true searches only for articles which are marked for use, if false all articles which are not marked for use are found, if empty all articles are found",
          "allowEmptyValue": true
        },
        "forWebshop": {
          "type": "boolean",
          "example": false,
          "description": "if true searches only for articles which are marked for webshop, if false all articles which are not marked for webshop are found, if empty all articles are found",
          "allowEmptyValue": true
        },
        "genericSearch": {
          "type": "string",
          "description": "Generic search field, which searches in multiple data (article name, brand and color). Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "groupByNameAndBrand": {
          "type": "boolean",
          "example": false,
          "description": "Group together frames by model and brand, use link to similar article to get different articles in the group",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches articles that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches articles that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Name&amp;#42;\"",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use article/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "producerCompanyID": {
          "type": "string",
          "description": "Use a id of table company, see section company",
          "allowEmptyValue": true
        },
        "withoutLocked": {
          "type": "boolean",
          "example": true,
          "description": "if true searches only for articles which are not locked,  if empty or false all articles are found",
          "allowEmptyValue": true
        }
      },
      "title": "ArticleSearchQuery",
      "description": "Search query used to filter articles"
    },
    "ArticleType": {
      "type": "object",
      "properties": {
        "hidden": { "type": "boolean" },
        "id": { "type": "string" },
        "value": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "ArticleType",
      "description": "Type of article"
    },
    "ArticleTypeReduced": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "value": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "ArticleTypeReduced",
      "description": "Type of article"
    },
    "ArticleTypeSearchQuery": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "if true searches only for hidden article types, if false only not hidden types are found, if empty all article types independent of hidden are found",
          "allowEmptyValue": true
        }
      },
      "title": "ArticleTypeSearchQuery",
      "description": "Search query, for article types"
    },
    "ArticleVariant": {
      "type": "object",
      "properties": {
        "addition": { "type": "string" },
        "articleColorID": { "type": "string" },
        "articleID": { "type": "string" },
        "axisCylinder": { "type": "number" },
        "colorCode": { "type": "string" },
        "commissionPeriod": { "type": "integer", "format": "int32" },
        "consignmentNotAllowed": { "type": "boolean" },
        "cylinder": { "type": "number" },
        "deliverableFrom": { "type": "string", "format": "date" },
        "deliveryState": { "$ref": "#/definitions/TranslatedString" },
        "description": { "type": "string" },
        "diameter": { "type": "number" },
        "id": { "type": "string" },
        "nearProfile": { "type": "string" },
        "preferedOrderOwnerType": { "$ref": "#/definitions/TranslatedString" },
        "radiusBasecurve": { "type": "number" },
        "side": { "$ref": "#/definitions/TranslatedString" },
        "size": { "type": "string" },
        "sphere": { "type": "number" },
        "stockNumber": { "type": "string" },
        "validFrom": { "type": "string", "format": "date" },
        "validTo": { "type": "string", "format": "date" }
      },
      "title": "ArticleVariant",
      "description": "Standard information about one article variant"
    },
    "ArticleVariantSearchQuery": {
      "type": "object",
      "properties": {
        "articleColorId": {
          "type": "string",
          "description": "Searches by producer color like \"sandy beach\", see section color, to get id of specific color",
          "allowEmptyValue": true
        },
        "articleId": {
          "type": "string",
          "description": "an article to fetch items for",
          "allowEmptyValue": true
        },
        "deliveryState": {
          "type": "array",
          "description": "a list of delivery states to fetch article variants for. article_variant_delivery_state_yes = Deliverable, article_variant_delivery_state_no = Not deliverable, article_variant_delivery_state_temporarily_not = Temporarily not deliverable",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "preferedOrderOwnerType": {
          "type": "array",
          "description": "a list of owners to fetch article variants for. order_type_firm= stock, order_owner_type_with_return = Stock (for credit), order_type_commission = commission, order_owner_type_borrow = borrow",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        }
      },
      "title": "ArticleVariantSearchQuery",
      "description": "Search query used to filter article variants"
    },
    "Audiogram": {
      "type": "object",
      "properties": {
        "createDate": { "$ref": "#/definitions/Timestamp" },
        "customerID": { "type": "string" },
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "noahActionID": { "type": "string" },
        "type": { "type": "string" },
        "v0": { "type": "integer", "format": "int32" },
        "v1": { "type": "integer", "format": "int32" },
        "v2": { "type": "integer", "format": "int32" },
        "v3": { "type": "integer", "format": "int32" },
        "v4": { "type": "integer", "format": "int32" },
        "v5": { "type": "integer", "format": "int32" },
        "v6": { "type": "integer", "format": "int32" },
        "v7": { "type": "integer", "format": "int32" },
        "v8": { "type": "integer", "format": "int32" },
        "v9": { "type": "integer", "format": "int32" }
      },
      "title": "Audiogram",
      "description": "Audiogram data in SQL useable form\n  The type is the kind of curve:\n   LAC left air conduction\n   RAC right air conduction\n \n   For tone audiogram the V values are the frequencies:\n   The intensity is the value stored in the V-fields as 0.1dB (350 = 35.0dB)\n   V9=12KHZ, V8=8KHz, V7=6KHz, V6=4KHz, V5=3KHZ, V4=2KHZ, V3=1KHz, V2=500Hz, V1=250Hz, V0=125Hz\n \n   Type for speech discrimination hearing loss is \"SDL\"\n   Values are the highest score percent in a curve of speech threshold points\n   V0=left un-aided   V1=right un-aided  V2=free field un-aided   V3=free field aided"
    },
    "AudiogramSearchQuery": {
      "type": "object",
      "properties": {
        "createDateFrom": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "audiograms from specified date (inclusive)",
          "allowEmptyValue": true
        },
        "createDateUntil": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "audiograms from specified date (inclusive)",
          "allowEmptyValue": true
        },
        "customerID": { "type": "string" },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches audiograms that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches audiograms that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "noahActionID": { "type": "string" },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use doctor/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "type": { "type": "string" }
      },
      "title": "AudiogramSearchQuery",
      "description": "Search query used to filter audiograms"
    },
    "Availability": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean",
          "example": false,
          "description": "Determines whether the resource is marked as \"available\" for this availability",
          "allowEmptyValue": false
        },
        "branchID": { "type": "string" },
        "comment": { "type": "string" },
        "creation": {
          "type": "string",
          "format": "date-time",
          "description": "The technical creation date for this availability",
          "allowEmptyValue": false
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "allowEmptyValue": false
        },
        "endTime": {
          "type": "string",
          "example": "12:34:56",
          "allowEmptyValue": true
        },
        "id": { "type": "string" },
        "resources": {
          "type": "array",
          "description": "A list of resources for this availability",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/Resource" }
        },
        "startTime": {
          "type": "string",
          "example": "12:34:56",
          "allowEmptyValue": true
        },
        "text": { "type": "string" },
        "type": {
          "description": "Describes the type of the availability",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        }
      },
      "title": "Availability",
      "description": "Detailed information about one availability"
    },
    "AvailabilitySearchQuery": {
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "example": "14:34:56",
          "description": "availabilities that end before specified time (inclusive)",
          "allowEmptyValue": true
        },
        "fromDate": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "availabilities from specified date (inclusive)",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use availabilities/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "resourceIDs": {
          "type": "array",
          "description": "availabilities using specified resources (logically and)",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "startTime": {
          "type": "string",
          "example": "12:34:56",
          "description": "availabilities that start after specified time (inclusive)",
          "allowEmptyValue": true
        },
        "toDate": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "availabilities to specified date (inclusive)",
          "allowEmptyValue": true
        },
        "typeIDs": {
          "type": "array",
          "description": "availabilities with specified types via PredefinedPropertyID",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        }
      },
      "title": "AvailabilitySearchQuery",
      "description": "Search query used to filter availabilities"
    },
    "AvailabilityToSave": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean",
          "example": false,
          "description": "Determines whether the resource is marked as \"available\" for this availability",
          "allowEmptyValue": false
        },
        "comment": {
          "type": "string",
          "description": "comment of the availability",
          "allowEmptyValue": false
        },
        "date": {
          "type": "string",
          "example": "2007-03-27",
          "description": "date of the availability - current date is used when omitted",
          "allowEmptyValue": false
        },
        "endTime": {
          "type": "string",
          "example": "14:46:46",
          "description": "ending time of the availability",
          "allowEmptyValue": false
        },
        "resourceIDs": {
          "type": "string",
          "example": ["ID1", "ID2"],
          "description": "resourceIDs for this availability",
          "allowEmptyValue": false
        },
        "startTime": {
          "type": "string",
          "example": "14:46:46",
          "description": "starting time of the availability",
          "allowEmptyValue": false
        },
        "text": {
          "type": "string",
          "description": "text that is to be displayed for this availability",
          "allowEmptyValue": false
        },
        "typeID": {
          "type": "string",
          "description": "PredefinedPropertyID of availability type",
          "allowEmptyValue": false
        },
        "useBranchID": {
          "type": "string",
          "description": "BranchID of the availability - callerBranch is used when omitted",
          "allowEmptyValue": false
        }
      },
      "title": "AvailabilityToSave",
      "description": "DTO to save an availability"
    },
    "BankAccount": {
      "type": "object",
      "properties": {
        "accountNumber": { "type": "string" },
        "bankCode": { "type": "string" },
        "bic": { "type": "string" },
        "comment": { "type": "string" },
        "directDebit": { "type": "boolean" },
        "directDebitState": { "$ref": "#/definitions/TranslatedString" },
        "directDebitType": { "$ref": "#/definitions/TranslatedString" },
        "iban": { "type": "string" },
        "locked": { "type": "boolean" },
        "name": { "type": "string" },
        "sepaMandateDate": { "type": "string", "format": "date" },
        "sepaMandateReference": { "type": "string" }
      },
      "title": "BankAccount",
      "description": "Information about one bank account"
    },
    "Book appointment by template": {
      "type": "object",
      "properties": {
        "branchID": {
          "type": "string",
          "description": "Branch information",
          "allowEmptyValue": true
        },
        "comment": {
          "type": "string",
          "description": "Comment for appointment, my contain customer information (name, address) as well as a user comment",
          "allowEmptyValue": true
        },
        "customerID": {
          "type": "string",
          "description": "Customer for appointment",
          "allowEmptyValue": true
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "2021-01-02",
          "description": "Date for the appointment",
          "allowEmptyValue": false
        },
        "onlineBooking": {
          "type": "boolean",
          "example": false,
          "description": "Used to filter resources in branch allowed for online booking",
          "allowEmptyValue": true
        },
        "resourceIDs": {
          "type": "array",
          "description": "Explicit resources, if null resources are taken from branch and template",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "startTime": {
          "type": "string",
          "example": "12:00",
          "description": "Start time for the appointment",
          "allowEmptyValue": false
        },
        "templateID": {
          "type": "string",
          "description": "Template holds information on the appointment to book",
          "allowEmptyValue": false
        }
      },
      "title": "Book appointment by template",
      "description": "Create a new appointment for given template, date and time"
    },
    "Branch": {
      "type": "object",
      "properties": {
        "address": { "$ref": "#/definitions/Address" },
        "applicationType": { "type": "integer", "format": "int64" },
        "bookMandator": { "type": "string" },
        "branchManager": { "$ref": "#/definitions/StaffReduced" },
        "chairman": { "type": "string" },
        "contractOption": { "type": "string" },
        "costCenter": { "type": "string" },
        "countyCourt": { "type": "string" },
        "debitorAccountNumberCustomer": { "type": "string" },
        "debitorAccountNumberHI": { "type": "string" },
        "debitorAccountNumberIntern": { "type": "string" },
        "directorate": { "type": "string" },
        "executive": { "type": "string" },
        "externalBankCollectionCenterNumber": { "type": "string" },
        "hiDistrict": { "type": "string" },
        "id": { "type": "string" },
        "identCode": { "type": "string" },
        "isHead": { "type": "boolean" },
        "isTreating": { "type": "boolean" },
        "modified": { "type": "string", "format": "date-time" },
        "name": { "type": "string" },
        "name1": { "type": "string" },
        "nameAffix": { "type": "string" },
        "openHours1": { "type": "string" },
        "openHours2": { "type": "string" },
        "owner": { "type": "string" },
        "president": { "type": "string" },
        "salesRegion": { "type": "string" },
        "sepaCreditorIdentifier": { "type": "string" },
        "taxNumber": { "type": "string" },
        "tradeRegisterCity": { "type": "string" },
        "tradeRegisterNumber": { "type": "string" },
        "vatNumber": { "type": "string" }
      },
      "title": "Branch",
      "description": "Detailed information about one branch (shop)"
    },
    "BranchReduced": {
      "type": "object",
      "properties": {
        "Name": { "type": "string" },
        "id": { "type": "string" },
        "identCode": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" }
      },
      "title": "BranchReduced",
      "description": "Reduced information about a branch"
    },
    "BranchSearchQuery": {
      "type": "object",
      "properties": {
        "activeAt": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "If date is set, returns only active branches at that date, if date is not set, also inactive branches are returned",
          "allowEmptyValue": true
        },
        "applicationType": {
          "type": "integer",
          "format": "int64",
          "description": "If not Null, return only branches fitting at least on application type are returned",
          "allowEmptyValue": true
        },
        "isTreating": {
          "type": "boolean",
          "example": false,
          "description": "If true only treating branches are returned, if false only non-treating branches are returned",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches branches that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches branches that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        }
      },
      "title": "BranchSearchQuery",
      "description": "Search query used to filter branch"
    },
    "Brand": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "logoImageURL": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "name": { "type": "string" },
        "producerCompanyID": { "type": "string" },
        "shortName": { "type": "string" },
        "supplierCompanyID": { "type": "string" }
      },
      "title": "Brand",
      "description": "Detailed information about one brand"
    },
    "BrandSearchQuery": {
      "type": "object",
      "properties": {
        "applicationType": {
          "type": "integer",
          "format": "int64",
          "description": "See section applicationtypes for possible values",
          "allowEmptyValue": true
        },
        "forUse": {
          "type": "boolean",
          "example": true,
          "description": "if true searches only for brands which are marked for use, if false all brands which are not marked for use are found, if empty all brands are found",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches articles that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches articles that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "producerCompanyID": {
          "type": "string",
          "description": "Use a id of table company, see section company",
          "allowEmptyValue": true
        },
        "shortName": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "supplierCompanyID": {
          "type": "string",
          "description": "Use a id of table company, see section company",
          "allowEmptyValue": true
        }
      },
      "title": "BrandSearchQuery",
      "description": "Search query used to filter brands"
    },
    "Color": {
      "type": "object",
      "properties": {
        "companyID": { "type": "string" },
        "id": { "type": "string" },
        "isBaseColor": { "type": "boolean" },
        "name": { "type": "string" },
        "rgbCode": {
          "type": "string",
          "description": "RGB Hex color code in format #RRGGBB",
          "allowEmptyValue": false
        }
      },
      "title": "Color",
      "description": "Detailed information about one color"
    },
    "ColorSearchQuery": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "if true searches only for hidden colors, if false only not hidden colors are found, if empty all colors independent of hidden are found",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "onlyBaseColor": {
          "type": "boolean",
          "example": false,
          "description": "true -&gt; Only Base colors are searched like red, green, blue. Not producer colors like sandy beach;\n false -&gt; Only producer colors are searched, like sandy beach;\n empty -&gt; All colors are searched",
          "allowEmptyValue": true
        },
        "producerID": {
          "type": "string",
          "description": "All colors related to one producer are found",
          "allowEmptyValue": true
        }
      },
      "title": "ColorSearchQuery",
      "description": "Search query used to filter colors"
    },
    "Comment": {
      "type": "object",
      "properties": {
        "branch": {
          "description": "Branch which has created the comment",
          "allowEmptyValue": false,
          "$ref": "#/definitions/BranchReduced"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp creation of comment",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "note": {
          "type": "string",
          "description": "Comment itself",
          "allowEmptyValue": true
        },
        "personID": {
          "type": "string",
          "description": "This is the owner of the comment, use customerID here",
          "allowEmptyValue": false
        },
        "staff": {
          "description": "Staff which has created comment",
          "allowEmptyValue": false,
          "$ref": "#/definitions/StaffReduced"
        },
        "treatmentHeadID": {
          "type": "string",
          "description": "Comment could be linked with a treatment",
          "allowEmptyValue": true
        },
        "type": {
          "description": "Type of the comment, linked to a predefined property",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        }
      },
      "title": "Comment",
      "description": "Comment of a person, e.g. a treatment note"
    },
    "CommentSearchQuery": {
      "type": "object",
      "properties": {
        "branchIDs": {
          "type": "array",
          "description": "Shop ids, is an array of ids",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "fromDate": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "comments from specified date (inclusive)",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "note": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Test&amp;#42;\"",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use comment/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "personID": {
          "type": "string",
          "description": "Find comments of one specific person (use customerID here)",
          "allowEmptyValue": true
        },
        "staffID": {
          "type": "string",
          "description": "Find comments for one specific staff",
          "allowEmptyValue": true
        },
        "toDate": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "comments to specified date (inclusive)",
          "allowEmptyValue": true
        },
        "treatmentHeadID": {
          "type": "string",
          "description": "Find comments for one specific treatment",
          "allowEmptyValue": true
        },
        "typeID": {
          "type": "string",
          "description": "Find comments of one specific type (PredefinedProperty id)",
          "allowEmptyValue": true
        }
      },
      "title": "CommentSearchQuery",
      "description": "Search query used to filter comments"
    },
    "CommentToSave": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "example": "2007-03-27T14:46:46",
          "description": "Creation date of the comment, if empty current date will be used",
          "allowEmptyValue": false
        },
        "note": {
          "type": "string",
          "description": "The text of the comment, if empty comment will not be saved",
          "allowEmptyValue": false
        },
        "personID": {
          "type": "string",
          "description": "This is the owner of the comment, use customerID here",
          "allowEmptyValue": false
        },
        "publishBranchID": {
          "type": "string",
          "description": "Related branch of the comment, if empty current branch is used",
          "allowEmptyValue": false
        },
        "staffID": {
          "type": "string",
          "description": "Staff which creates the comment, use id of staff here, if empty current staff will be used",
          "allowEmptyValue": false
        },
        "treatmentHeadID": {
          "type": "string",
          "description": "Connected treatment, could be empty",
          "allowEmptyValue": false
        },
        "typeID": {
          "type": "string",
          "description": "Type of the comment, use id of predefined property here, if empty type note is used",
          "allowEmptyValue": false
        }
      },
      "title": "CommentToSave",
      "description": "DTO to save a comment"
    },
    "Company": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": { "$ref": "#/definitions/Address" }
        },
        "branchCustomerNumbers": {
          "type": "array",
          "items": { "$ref": "#/definitions/ApiCompanyCustomerNumber" }
        },
        "commercialRegisterNumber": { "type": "string" },
        "companyNumber": { "type": "string" },
        "creditorNumber": { "type": "string" },
        "globalCustomerNumber": { "type": "string" },
        "id": { "type": "string" },
        "ident": { "type": "string" },
        "isUsed": { "type": "boolean" },
        "modified": { "type": "string", "format": "date-time" },
        "name": { "type": "string" },
        "shortName": { "type": "string" },
        "taxNumber": { "type": "string" },
        "vatFreed": { "type": "boolean" },
        "vatNumber": { "type": "string" }
      },
      "title": "Company",
      "description": "Detailed information about one company"
    },
    "CompanySearchQuery": {
      "type": "object",
      "properties": {
        "forUse": {
          "type": "boolean",
          "example": true,
          "description": "if true searches only for companies which are marked for use, if false all companies which are not marked for use are found, if empty all companies are found",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches companies that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches companies that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "shortName": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        }
      },
      "title": "CompanySearchQuery",
      "description": "Search query, used to filter companies"
    },
    "Complaint": {
      "type": "object",
      "properties": {
        "articleID": { "type": "string" },
        "articleItemID": { "type": "string" },
        "branchID": { "type": "string" },
        "complaintDate": { "type": "string", "format": "date" },
        "complaintNr": { "type": "string" },
        "complaintReason": { "$ref": "#/definitions/PredefinedPropertySimple" },
        "deliveryID": { "type": "string" },
        "destinationTreatmentID": { "type": "string" },
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "progress": { "type": "string" },
        "staff": { "$ref": "#/definitions/StaffReduced" },
        "supplierID": { "type": "string" },
        "translatedSide": { "$ref": "#/definitions/TranslatedString" },
        "type": { "$ref": "#/definitions/PredefinedPropertySimple" }
      },
      "title": "Complaint",
      "description": "Information about a complaint"
    },
    "ContactLense": {
      "type": "object",
      "properties": {
        "branch": {
          "description": "identifier the branch where the contact lense has been sold",
          "allowEmptyValue": true,
          "$ref": "#/definitions/BranchReduced"
        },
        "customerID": { "type": "string" },
        "date": { "type": "string", "format": "date" },
        "id": { "type": "string" },
        "invoices": {
          "type": "array",
          "description": "All invoices and offers with positions that are related to this contact lense",
          "allowEmptyValue": false,
          "items": { "$ref": "#/definitions/Invoice" }
        },
        "lenseLeft": { "$ref": "#/definitions/ContactLenseDetail" },
        "lenseRight": { "$ref": "#/definitions/ContactLenseDetail" },
        "modified": { "type": "string", "format": "date-time" },
        "orders": {
          "type": "array",
          "description": "All orders with orderpositons that are related to this contact lense",
          "allowEmptyValue": false,
          "items": { "$ref": "#/definitions/Order" }
        },
        "staff": {
          "description": "identifier the staff who has sold the contact lense",
          "allowEmptyValue": true,
          "$ref": "#/definitions/StaffReduced"
        },
        "status": {
          "description": "Describes the status of the contact lense",
          "allowEmptyValue": true,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        },
        "treatmentID": { "type": "string" },
        "treatmentNumber": { "type": "string" },
        "type": {
          "description": "Describes the type of the contact lense",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        }
      },
      "title": "ContactLense"
    },
    "ContactLenseDetail": {
      "type": "object",
      "properties": {
        "addition": {
          "type": "string",
          "example": "2.00 or high",
          "description": "Addition",
          "allowEmptyValue": false
        },
        "amount": {
          "type": "number",
          "example": 1.0,
          "description": "Amount",
          "allowEmptyValue": false
        },
        "articleId": {
          "type": "string",
          "example": "0114ee989656000001a8005056C00008",
          "description": "The ID of the article",
          "allowEmptyValue": false
        },
        "articleName": {
          "type": "string",
          "example": "1 DAY ACUVUE MOIST (180er PACK)",
          "description": "Articles name. This is only used as a fallback if the article can not be matched by its articleID or it UID of the manufacturer. Otherwise it will be ignored.",
          "allowEmptyValue": false
        },
        "axisCylinder": {
          "type": "number",
          "example": 75.0,
          "description": "Axis of the cylinder",
          "allowEmptyValue": false
        },
        "color": {
          "type": "string",
          "example": "Farbintensivierend Green",
          "description": "Color",
          "allowEmptyValue": false
        },
        "cylinder": {
          "type": "number",
          "example": -0.75,
          "description": "Cylinder",
          "allowEmptyValue": false
        },
        "diameter": {
          "type": "number",
          "example": 14.2,
          "description": "Diameter",
          "allowEmptyValue": false
        },
        "excentricity": {
          "type": "number",
          "example": 2.0,
          "description": "Excentricity",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "material": {
          "type": "string",
          "example": "Etafilcon",
          "description": "Material",
          "allowEmptyValue": false
        },
        "properties": {
          "example": "OpticalZoneType:CD",
          "description": "Addition order properties as defined in the spectaris catalog",
          "allowEmptyValue": false,
          "$ref": "#/definitions/Optional«Map«string,string»»"
        },
        "radiusBasecurve": {
          "type": "number",
          "example": 8.7,
          "description": "Basecurve",
          "allowEmptyValue": false
        },
        "salesPrice": {
          "type": "number",
          "example": 29.9,
          "description": "Sales price",
          "allowEmptyValue": false
        },
        "sphere": {
          "type": "number",
          "example": 2.75,
          "description": "Sphere",
          "allowEmptyValue": false
        },
        "uidManufacturer": {
          "type": "string",
          "example": "1DM-OEP-REV",
          "description": "If the articleId is not specified the article is searched by its manufacturer UID",
          "allowEmptyValue": false
        }
      },
      "title": "ContactLenseDetail"
    },
    "ContactLenseSearchQuery": {
      "type": "object",
      "properties": {
        "customerID": {
          "type": "string",
          "description": "contact lenses for specified customerID",
          "allowEmptyValue": true
        },
        "fromDate": {
          "type": "string",
          "format": "date",
          "description": "contact lenses created after a specified from date",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches contact lenses that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches contact lenses that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use customer/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "orderNumber": {
          "type": "string",
          "example": "BST-0001-20",
          "description": "Searches contact lenses that have been ordered with a given AMPAREX order number",
          "allowEmptyValue": true
        },
        "toDate": {
          "type": "string",
          "format": "date",
          "description": "contact lenses created before a specified to date",
          "allowEmptyValue": true
        },
        "treatmentID": {
          "type": "string",
          "description": "contact lenses for specified treatmentID",
          "allowEmptyValue": true
        }
      },
      "title": "ContactLenseSearchQuery",
      "description": "Search query used to filter contactlenses"
    },
    "ContactLenseToSave": {
      "type": "object",
      "properties": {
        "connectedBranchID": {
          "type": "string",
          "example": "0114ee9723da000000ea005056C00008",
          "description": "The ID of the branch that has sold the contact lense",
          "allowEmptyValue": false
        },
        "connectedStaffID": {
          "type": "string",
          "example": "0114ee9723da000000ea005056C00008",
          "description": "The ID of the staff that has sold the contact lense",
          "allowEmptyValue": false
        },
        "createInvoice": { "$ref": "#/definitions/Optional«boolean»" },
        "customerID": {
          "type": "string",
          "example": "0114ee9723da000000ea005056C00008",
          "description": "The customerID this lense belongs to. A new process will be created",
          "allowEmptyValue": false
        },
        "invoicePositions": {
          "description": "A list of additional invoice positions (e.g. cleaning system, discount, etc.)",
          "allowEmptyValue": false,
          "$ref": "#/definitions/InvoicePositionToSave"
        },
        "lenseLeft": {
          "description": "Details about the left contact lense",
          "allowEmptyValue": false,
          "$ref": "#/definitions/ContactLenseDetail"
        },
        "lenseRight": {
          "description": "Details about the right contact lense",
          "allowEmptyValue": false,
          "$ref": "#/definitions/ContactLenseDetail"
        },
        "parentTreatmentHeadID": {
          "type": "string",
          "example": "0114ee9723da000000ea005056C00008",
          "description": "The ID of an allready existing process. The new lense will be created as a follow up lense for the existing process",
          "allowEmptyValue": false
        },
        "payedAmount": {
          "type": "number",
          "example": 33.9,
          "description": "The amount that has already been payed along with this sale",
          "allowEmptyValue": false
        }
      },
      "title": "ContactLenseToSave",
      "description": "DTO to save a contactlense"
    },
    "CreationResponse": {
      "type": "object",
      "properties": {
        "createdID": { "type": "string" },
        "errorMessage": { "type": "string" }
      },
      "title": "CreationResponse",
      "description": "Returns the result of a successful creation of an entity"
    },
    "Customer": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Main address of the customer",
          "allowEmptyValue": false,
          "$ref": "#/definitions/Address"
        },
        "advertisingFlags": {
          "type": "integer",
          "format": "int32",
          "description": "1=Letter 2=E-Mail 4=Phone 8=SMS / Example: Letter + E-Mail + SMS = 1+2+8 = 11",
          "allowEmptyValue": false
        },
        "anonymizedAt": { "type": "string", "format": "date" },
        "birthdate": { "type": "string", "format": "date" },
        "branchID": {
          "type": "string",
          "description": "The branchID a customer is assigned to",
          "allowEmptyValue": false
        },
        "customerNr": { "type": "integer", "format": "int32" },
        "customerNrExternal": {
          "type": "string",
          "description": "A customer nr sometimes used in addition to the normal customer nr",
          "allowEmptyValue": true
        },
        "customerSince": { "type": "string", "format": "date" },
        "dominantEye": { "type": "string" },
        "dominantHand": { "type": "string" },
        "extensionName": { "type": "string" },
        "firstName": { "type": "string" },
        "healthInsurance": { "$ref": "#/definitions/HealthInsuranceReduced" },
        "hiMembershipID": { "type": "string" },
        "id": { "type": "string" },
        "lastVisit": { "type": "string", "format": "date" },
        "marketingAction": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "privacyStatement": {
          "type": "boolean",
          "example": false,
          "description": "State of privacy statment: TRUE = acceptec, FALSE = declined, NULL = open",
          "allowEmptyValue": false
        },
        "privacyStatementDate": {
          "type": "string",
          "format": "date",
          "description": "Date when the customer has accepted the privacy statement",
          "allowEmptyValue": false
        },
        "restrictedView": { "type": "boolean" },
        "salutation": { "$ref": "#/definitions/TranslatedString" },
        "socialSecurityNumber": {
          "type": "string",
          "description": "The social security number of the customer",
          "allowEmptyValue": false
        },
        "staffID": {
          "type": "string",
          "description": "The staffID a customer is assigned to",
          "allowEmptyValue": false
        },
        "status": {
          "description": "The customer status",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        },
        "surname": { "type": "string" },
        "title": { "type": "string" }
      },
      "title": "Customer",
      "description": "Detailed information about one customer"
    },
    "CustomerReduced": {
      "type": "object",
      "properties": {
        "birthdate": { "type": "string", "format": "date" },
        "customerNr": { "type": "integer", "format": "int32" },
        "extensionName": { "type": "string" },
        "firstName": { "type": "string" },
        "id": { "type": "string" },
        "salutation": { "type": "string" },
        "surname": { "type": "string" },
        "title": { "type": "string" },
        "translatedSalutation": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "CustomerReduced",
      "description": "Reduced information about a customer"
    },
    "CustomerReducedWithEmail": {
      "type": "object",
      "properties": {
        "birthdate": { "type": "string", "format": "date" },
        "customerNr": { "type": "integer", "format": "int32" },
        "customerNrExtern": { "type": "string" },
        "email": { "type": "string" },
        "extensionName": { "type": "string" },
        "firstName": { "type": "string" },
        "id": { "type": "string" },
        "salutation": { "$ref": "#/definitions/TranslatedString" },
        "surname": { "type": "string" },
        "title": { "type": "string" }
      },
      "title": "CustomerReducedWithEmail",
      "description": "Reduced information about a customer"
    },
    "CustomerSearchQuery": {
      "type": "object",
      "properties": {
        "birthdateFrom": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches customers that are born after birthdateFrom (inclusive)",
          "allowEmptyValue": true
        },
        "birthdateTo": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "Searches customers that are born before birthdateTo (inclusive)",
          "allowEmptyValue": true
        },
        "branchID": {
          "type": "string",
          "description": "Searches for exact branchID",
          "allowEmptyValue": true
        },
        "customerIDs": {
          "type": "array",
          "description": "Searches by using multiple customer IDs",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "externalCustomerNr": {
          "type": "string",
          "description": "Searches by external customer number",
          "allowEmptyValue": true
        },
        "firstname": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches customers that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches customers that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use customer/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "statusIDs": {
          "type": "array",
          "description": "Searches by using multiple predefinedProperty IDs, each of propertyType \"propertytype_customer_status\"",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "surname": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        }
      },
      "title": "CustomerSearchQuery",
      "description": "Search query used to filter customers"
    },
    "CustomerToSave": {
      "type": "object",
      "properties": {
        "address": {
          "description": "The address object of the customers main residence",
          "allowEmptyValue": true,
          "$ref": "#/definitions/AddressToSave"
        },
        "advertisingFlags": {
          "type": "integer",
          "format": "int32",
          "example": 15,
          "description": "flags for accepted advertising channels (1=Letter 2=E-Mail 4=Phone 8=SMS) / Example: Letter + E-Mail + SMS = 1+2+8 = 11",
          "allowEmptyValue": false
        },
        "birthdate": {
          "type": "string",
          "example": "1965-05-14",
          "description": "Customers birthdate",
          "allowEmptyValue": false
        },
        "customerNrExtern": {
          "type": "string",
          "description": "External identifier of customer",
          "allowEmptyValue": false
        },
        "customerSince": {
          "type": "string",
          "example": "2012-12-08",
          "description": "Customer in our shop since",
          "allowEmptyValue": false
        },
        "dominantEye": {
          "type": "string",
          "example": "side_right",
          "description": "The dominant eye (side_right,side_left)",
          "allowEmptyValue": false
        },
        "dominantHand": {
          "type": "string",
          "example": "side_left",
          "description": "The dominant hand (side_right,side_left)",
          "allowEmptyValue": false
        },
        "extensionName": {
          "type": "string",
          "example": "von",
          "description": "Depending on country: Name extension (von, zu) customers middle name (F.) or secondary surname e.g. for spanish names (García)",
          "allowEmptyValue": false
        },
        "firstName": {
          "type": "string",
          "example": "Else",
          "description": "Customers first name",
          "allowEmptyValue": false
        },
        "lastVisit": {
          "type": "string",
          "example": "2006-05-25",
          "description": "The date when the customer has last visited the shop",
          "allowEmptyValue": false
        },
        "privacyStatement": {
          "type": "boolean",
          "example": true,
          "description": "Does the customer have already accepted/signed the shops privacy statement? (true=accepted, null=not yet, false=declined)",
          "allowEmptyValue": false
        },
        "privacyStatementDate": {
          "type": "string",
          "example": "2018-05-25",
          "description": "The date of acceptance/signature of privacy statement",
          "allowEmptyValue": false
        },
        "respBranchID": {
          "type": "string",
          "example": "0114ee95177000000003005056C00008",
          "description": "The ID of the branch that is responsible for this customer",
          "allowEmptyValue": false
        },
        "respStaffID": {
          "type": "string",
          "example": "013a4f6d22dc00019671785d18fcca80",
          "description": "The ID of the staff member responsible for this customer",
          "allowEmptyValue": false
        },
        "restrictedView": {
          "type": "boolean",
          "example": false,
          "description": "TRUE if access to this customer data is restricted to the responsible staff member only. (May be used for VIP persons)",
          "allowEmptyValue": false
        },
        "salutation": {
          "type": "string",
          "example": "salutation_missis",
          "description": "Customers gender (salutation_missis/salutation_mister/salutation_diverse)",
          "allowEmptyValue": false
        },
        "statusID": {
          "type": "string",
          "example": "013d79fd800d00000038ABCDEF364676",
          "description": "The ID of the customers status. Use /alias/{alias}/protected/properties/propertytypes/search with name=\"propertytype_customer_status\" to get the type-id and then /alias/{alias}/protected/properties/predefinedproperties/search with propertyTypeIDs=[\"type-id\"] to get all possible ids and its meaning",
          "allowEmptyValue": false
        },
        "surname": {
          "type": "string",
          "example": "Kling",
          "description": "Customers last name",
          "allowEmptyValue": false
        },
        "title": {
          "type": "string",
          "example": "Prof. Dr.",
          "description": "Customers academic title",
          "allowEmptyValue": false
        }
      },
      "title": "CustomerToSave",
      "description": "DTO to save a customer. When creating a new customer, at least surname and firstname are required."
    },
    "Delivery": {
      "type": "object",
      "properties": {
        "deliveryDate": { "type": "string", "format": "date" },
        "deliveryNoteDate": { "type": "string", "format": "date" },
        "deliveryNr": { "type": "string" },
        "deliveryPositions": {
          "type": "array",
          "items": { "$ref": "#/definitions/DeliveryPosition" }
        },
        "deliveryType": { "$ref": "#/definitions/TranslatedString" },
        "fromPersonID": { "type": "string" },
        "id": { "type": "string" },
        "notForInvoice": { "type": "boolean" },
        "notice": { "type": "string" },
        "toPersonID": { "type": "string" },
        "trackingNumber": { "type": "string" }
      },
      "title": "Delivery",
      "description": "Information about one delivery"
    },
    "DeliveryPosition": {
      "type": "object",
      "properties": {
        "amount": { "type": "number" },
        "articleID": { "type": "string" },
        "articleItemID": { "type": "string" },
        "articleVariantID": { "type": "string" },
        "externalItemNr": { "type": "string" },
        "id": { "type": "string" },
        "invoiceDeliveryNr": { "type": "string" },
        "orderID": { "type": "string" },
        "orderPositionID": { "type": "string" },
        "purchasePrice": { "type": "number" }
      },
      "title": "DeliveryPosition"
    },
    "DeliverySearchQuery": {
      "type": "object",
      "properties": {
        "deliveryNr": {
          "type": "string",
          "description": "Searches by delivery note number",
          "allowEmptyValue": true
        },
        "deliveryType": {
          "type": "string",
          "example": "delivery_type_storage",
          "description": "Searches by delivery type. Use one of the following values : delivery_type_storage, delivery_type_restorage_repair, delivery_type_internal_transfer, delivery_type_return, delivery_type_return_comission, delivery_type_return_repair, delivery_type_return_voucher, delivery_type_handout, delivery_type_handout_borrow, delivery_type_handout_repair, delivery_type_drop_shipment, delivery_type_marketplace",
          "allowEmptyValue": true
        },
        "fromDeliveryDate": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches deliveries that delivered after fromDeliveryDate (inclusive)",
          "allowEmptyValue": true
        },
        "fromDeliveryNoteDate": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches deliveries that have delivery note date after fromDeliveryNoteDate (inclusive)",
          "allowEmptyValue": true
        },
        "fromPersonId": {
          "type": "string",
          "example": "0115124dc15000000003005056C00008",
          "description": "Searches by sender id",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use delivery/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "toDeliveryDate": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches deliveries that delivered before toDeliveryDate (inclusive)",
          "allowEmptyValue": true
        },
        "toDeliveryNoteDate": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches deliveries that have delivery note date before fromDeliveryNoteDate (inclusive)",
          "allowEmptyValue": true
        },
        "toPersonId": {
          "type": "string",
          "example": "0115124dc15000000003005056C00008",
          "description": "Searches by receiver id",
          "allowEmptyValue": true
        },
        "trackingNumber": {
          "type": "string",
          "description": "Searches by tracking number",
          "allowEmptyValue": true
        }
      },
      "title": "DeliverySearchQuery",
      "description": "Search query used to filter deliveries"
    },
    "Doctor": {
      "type": "object",
      "properties": {
        "birthdate": { "type": "string", "format": "date" },
        "businessName": { "type": "string" },
        "businessPremisesNumber": { "type": "string" },
        "comment": { "type": "string" },
        "dentist": { "type": "boolean" },
        "doctorNumber": { "type": "string" },
        "doctorSeqNr": { "type": "integer", "format": "int32" },
        "endOfOccupation": { "type": "string", "format": "date" },
        "extensionname": { "type": "string" },
        "firstname": { "type": "string" },
        "id": { "type": "string" },
        "ikNumber": { "type": "string" },
        "postNominal": { "type": "string" },
        "properties": {
          "type": "array",
          "items": { "$ref": "#/definitions/DoctorProperty" }
        },
        "salutation": { "type": "string" },
        "surname": { "type": "string" },
        "title": { "type": "string" },
        "used": { "type": "boolean" }
      },
      "title": "Doctor",
      "description": "Detailed information about one doctor"
    },
    "DoctorProperty": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "propertyType": { "$ref": "#/definitions/PropertyType" },
        "value": {
          "description": "value of the property with technical key and translation",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        }
      },
      "title": "DoctorProperty",
      "description": "Doctor property maybe user defined or not"
    },
    "DoctorReduced": {
      "type": "object",
      "properties": {
        "extensionName": { "type": "string" },
        "firstname": { "type": "string" },
        "id": { "type": "string" },
        "salutation": { "type": "string" },
        "surname": { "type": "string" },
        "title": { "type": "string" },
        "translatedSalutation": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "DoctorReduced",
      "description": "Reduced information about a doctor"
    },
    "DoctorSearchQuery": {
      "type": "object",
      "properties": {
        "birthdate": { "type": "string", "format": "date" },
        "businessName": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "businessPremisesNumber": { "type": "string" },
        "dentist": { "type": "boolean" },
        "doctorNumber": { "type": "string" },
        "doctorSeqNr": { "type": "integer", "format": "int32" },
        "firstname": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "ikNumber": {
          "type": "string",
          "description": "Filter by specific IK-Number",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use doctor/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "postNominal": { "type": "string" },
        "surname": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "used": { "type": "boolean" }
      },
      "title": "DoctorSearchQuery",
      "description": "Search query used to filter doctors"
    },
    "Document": {
      "type": "object",
      "properties": {
        "branch": {
          "description": "Branch which has created the document",
          "allowEmptyValue": false,
          "$ref": "#/definitions/BranchReduced"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp creation of document in AMPAREX",
          "allowEmptyValue": false
        },
        "description": { "type": "string" },
        "documentSourceID": { "type": "string" },
        "documentTemplateID": {
          "type": "string",
          "description": "Document template which was source creation template for this document",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "mimeType": { "type": "string" },
        "name": { "type": "string" },
        "staff": {
          "description": "Staff which has created document",
          "allowEmptyValue": false,
          "$ref": "#/definitions/StaffReduced"
        },
        "treatmentHeadID": {
          "type": "string",
          "description": "If document was created in a treatment, this is the connected id. Could be null if no treatment is conenected",
          "allowEmptyValue": true
        },
        "type": {
          "description": "Type of the document, linked to a predefined property",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        }
      },
      "title": "Document",
      "description": "Document wrapper without binary"
    },
    "DocumentSearchQuery": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Test&amp;#42;\"",
          "allowEmptyValue": true
        },
        "documentSourceID": {
          "type": "string",
          "description": "Find documents for one specific source (eg. InvoiceID)",
          "allowEmptyValue": true
        },
        "fromDate": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Documents from specified date (inclusive)",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "mimeType": {
          "type": "string",
          "description": "Search by mime type e.g. \"application/pdf\"",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Test&amp;#42;\"",
          "allowEmptyValue": true
        },
        "staffID": {
          "type": "string",
          "description": "Find documents for one specific staff",
          "allowEmptyValue": true
        },
        "toDate": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "Documents to specified date (inclusive)",
          "allowEmptyValue": true
        },
        "treatmentHeadID": {
          "type": "string",
          "description": "Find documents for one specific treatment",
          "allowEmptyValue": true
        },
        "typeID": {
          "type": "string",
          "description": "Find documents of one specific type (PredefinedProperty id)",
          "allowEmptyValue": true
        }
      },
      "title": "DocumentSearchQuery",
      "description": "Search query used to filter documents"
    },
    "DocumentTemplate": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "id": { "type": "string" },
        "mimeType": { "type": "string" },
        "name": { "type": "string" },
        "type": {
          "description": "Type of the document, linked to a predefined property",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        }
      },
      "title": "DocumentTemplate",
      "description": "Templates for documents"
    },
    "DocumentTemplateSearchQuery": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Test&amp;#42;\"",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "mimeType": {
          "type": "string",
          "description": "Search by mime type e.g. \"application/pdf\"",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Test&amp;#42;\"",
          "allowEmptyValue": true
        },
        "typeID": {
          "type": "string",
          "description": "Find documents of one specific type (PredefinedProperty id)",
          "allowEmptyValue": true
        }
      },
      "title": "DocumentTemplateSearchQuery",
      "description": "Search query used to filter document templates"
    },
    "DocumentToSave": {
      "type": "object",
      "properties": {
        "documentContent": {
          "type": "string",
          "format": "byte",
          "example": [1, 2, 3, 4],
          "description": "Document binary",
          "allowEmptyValue": false
        },
        "documentDescription": {
          "type": "string",
          "description": "Description of the document to save",
          "allowEmptyValue": true
        },
        "documentName": {
          "type": "string",
          "description": "Name of the document to save",
          "allowEmptyValue": true
        },
        "documentSourceID": {
          "type": "string",
          "description": "Document source ID",
          "allowEmptyValue": true
        },
        "documentTemplateID": {
          "type": "string",
          "description": "Document template ID",
          "allowEmptyValue": true
        },
        "treatmentHeadID": {
          "type": "string",
          "description": "If document is created in a treatment, this is the connected id. Could be null if no treatment is connected",
          "allowEmptyValue": true
        }
      },
      "title": "DocumentToSave",
      "description": "DTO to save a document in customer archive"
    },
    "Free busy appointment": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date",
          "example": "2021-01-02",
          "description": "Date for the slot",
          "allowEmptyValue": false
        },
        "endTime": {
          "type": "string",
          "example": "12:30",
          "description": "End time for the slot",
          "allowEmptyValue": false
        },
        "free": {
          "type": "boolean",
          "example": false,
          "description": "If true this a free (bookable) slot, else it is taken (unavailable)",
          "allowEmptyValue": false
        },
        "startTime": {
          "type": "string",
          "example": "12:00",
          "description": "Start time for the slot",
          "allowEmptyValue": false
        }
      },
      "title": "Free busy appointment",
      "description": "Free/busy slots for appointment planner"
    },
    "GlassesCare": {
      "type": "object",
      "properties": {
        "abcMets": { "type": "string" },
        "azg": { "type": "number" },
        "bleft": { "type": "number" },
        "branch": {
          "description": "identifier the branch where the glasses has been sold",
          "allowEmptyValue": true,
          "$ref": "#/definitions/BranchReduced"
        },
        "bright": { "type": "number" },
        "centerThicknessOptimized": { "type": "boolean" },
        "customerID": { "type": "string" },
        "designType": { "type": "string" },
        "dfLeft": { "type": "number" },
        "dfRight": { "type": "number" },
        "distanceMid": { "type": "number" },
        "distanceNear": { "type": "number" },
        "dnLeft": { "type": "number" },
        "dnRight": { "type": "number" },
        "endDate": { "type": "string", "format": "date" },
        "facetForm": { "type": "string" },
        "formHeight": { "type": "number" },
        "formLength": { "type": "number" },
        "frame": { "$ref": "#/definitions/ArticleItem" },
        "frameFit": { "type": "number" },
        "frameText": { "type": "string" },
        "glasLeft": { "$ref": "#/definitions/GlassesConfiguration" },
        "glasRight": { "$ref": "#/definitions/GlassesConfiguration" },
        "glassesPassPrinted": { "type": "boolean" },
        "id": { "type": "string" },
        "initials": { "type": "string" },
        "insetsLeft": { "type": "number" },
        "insetsRight": { "type": "number" },
        "invoices": {
          "type": "array",
          "items": { "$ref": "#/definitions/Invoice" }
        },
        "komplettbrille": { "type": "boolean" },
        "mindestranddicke": { "type": "number" },
        "modified": { "type": "string", "format": "date-time" },
        "myStyleCode": { "type": "string" },
        "nearProfile": { "type": "string" },
        "nearVisionBehaviour": { "type": "string" },
        "notice": { "type": "string" },
        "orderGlasses": { "type": "boolean" },
        "orderedGlasLeft": { "$ref": "#/definitions/GlassesConfiguration" },
        "orderedGlasRight": { "$ref": "#/definitions/GlassesConfiguration" },
        "ownFrame": { "type": "boolean" },
        "priceFrame": { "type": "number" },
        "priceGlasLeft": { "type": "number" },
        "priceGlasRight": { "type": "number" },
        "progressionLengthLeft": { "type": "number" },
        "progressionLengthRight": { "type": "number" },
        "refractionGlasses": { "$ref": "#/definitions/RefractionReport" },
        "refractionObjective": { "$ref": "#/definitions/RefractionReport" },
        "refractionPrescription": { "$ref": "#/definitions/RefractionReport" },
        "remoteEdging": { "type": "boolean" },
        "scheibenwinkel": { "type": "number" },
        "staff": {
          "description": "identifier the staff who has sold the glasses",
          "allowEmptyValue": true,
          "$ref": "#/definitions/StaffReduced"
        },
        "startDate": { "type": "string", "format": "date" },
        "treatment": { "$ref": "#/definitions/Treatment" },
        "treatmentHeadID": { "type": "string" },
        "treatmentNumber": { "type": "string" },
        "type": { "$ref": "#/definitions/PredefinedPropertyReduced" },
        "vorneigung": { "type": "number" },
        "weight": { "type": "number" }
      },
      "title": "GlassesCare"
    },
    "GlassesConfiguration": {
      "type": "object",
      "properties": {
        "articleID": { "type": "string" },
        "bloomingType": { "type": "string" },
        "blueFilter": { "type": "boolean" },
        "cleanSurfaceType": { "type": "string" },
        "descriptionBlooming": { "type": "string" },
        "descriptionLenseBase": { "type": "string" },
        "descriptionOther1": { "type": "string" },
        "descriptionOther2": { "type": "string" },
        "descriptionOther3": { "type": "string" },
        "descriptionOther4": { "type": "string" },
        "descriptionTinge": { "type": "string" },
        "diameter": { "type": "string" },
        "hardSurfaceType": { "type": "string" },
        "hstcodeBlooming": { "type": "string" },
        "hstcodeLenseBase": { "type": "string" },
        "hstcodeOther1": { "type": "string" },
        "hstcodeOther2": { "type": "string" },
        "hstcodeOther3": { "type": "string" },
        "hstcodeOther4": { "type": "string" },
        "hstcodeTinge": { "type": "string" },
        "material": { "type": "string" },
        "mirrorSurface": { "type": "boolean" },
        "polarizing": { "type": "boolean" },
        "preferredDiameter": { "type": "string" },
        "priceBlooming": { "type": "number" },
        "priceLenseBase": { "type": "number" },
        "priceOther": { "type": "number" },
        "priceTinge": { "type": "number" },
        "purchaseListPrice": { "type": "number" },
        "purchasePrice": { "type": "number" },
        "refractionIndex": { "type": "number" },
        "salesPrice": { "type": "number" },
        "side": { "type": "string" },
        "sportGlass": { "type": "boolean" },
        "thicknessOptimized": { "type": "boolean" },
        "tingeType": { "type": "string" },
        "totalListSalesPrice": { "type": "number" },
        "type": { "type": "string" },
        "uvFilter": { "type": "boolean" }
      },
      "title": "GlassesConfiguration"
    },
    "GlassesSearchQuery": {
      "type": "object",
      "properties": {
        "customerID": {
          "type": "string",
          "description": "contact lenses for specified customerID",
          "allowEmptyValue": true
        },
        "fromDate": {
          "type": "string",
          "format": "date",
          "description": "glasses created after a specified from date",
          "allowEmptyValue": true
        },
        "loadTreatment": {
          "type": "boolean",
          "example": true,
          "description": "if true treatment is also loaded",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches glasses that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches glasses that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use customer/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "toDate": {
          "type": "string",
          "format": "date",
          "description": "glasses created before a specified to date",
          "allowEmptyValue": true
        },
        "treatmentID": {
          "type": "string",
          "description": "glasses for specified treatmentID",
          "allowEmptyValue": true
        }
      },
      "title": "GlassesSearchQuery",
      "description": "Search query used to filter glassess"
    },
    "HealthInsurance": {
      "type": "object",
      "properties": {
        "hiType": { "$ref": "#/definitions/TranslatedString" },
        "id": { "type": "string" },
        "ikNumber": { "type": "string" },
        "name": { "type": "string" },
        "shortName": { "type": "string" }
      },
      "title": "HealthInsurance",
      "description": "Information about a health insurance"
    },
    "HealthInsuranceReduced": {
      "type": "object",
      "properties": {
        "hiType": { "$ref": "#/definitions/TranslatedString" },
        "id": { "type": "string" },
        "ikNumber": { "type": "string" },
        "name": { "type": "string" },
        "shortName": { "type": "string" }
      },
      "title": "HealthInsuranceReduced",
      "description": "Reduced information about a health insurance"
    },
    "HealthInsuranceSearchQuery": {
      "type": "object",
      "properties": {
        "ikNumber": {
          "type": "string",
          "description": "IK-number of the health insurance",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "name": {
          "type": "string",
          "description": "Name of the health insurance",
          "allowEmptyValue": true
        },
        "shortName": {
          "type": "string",
          "description": "Shortname of the health insurance",
          "allowEmptyValue": true
        }
      },
      "title": "HealthInsuranceSearchQuery",
      "description": "Search query used to filter health insurances"
    },
    "HearingCare": {
      "type": "object",
      "properties": {
        "battery": { "$ref": "#/definitions/ApiArticleItemOverview" },
        "comment": { "type": "string" },
        "contributionFree": { "type": "boolean" },
        "createdDate": { "type": "string", "format": "date" },
        "createdStaffID": { "type": "string" },
        "customerID": { "type": "string" },
        "device": { "$ref": "#/definitions/ApiArticleItemOverview" },
        "deviceCareDate": { "type": "string", "format": "date" },
        "deviceReturnDate": { "type": "string", "format": "date" },
        "endOfUseDate": { "type": "string", "format": "date" },
        "handoutDate": { "type": "string", "format": "date" },
        "hearer": { "$ref": "#/definitions/ApiArticleItemOverview" },
        "hearerCareDate": { "type": "string", "format": "date" },
        "hearerReturnDate": { "type": "string", "format": "date" },
        "id": { "type": "string" },
        "invisible": { "type": "boolean" },
        "lastFitting": { "type": "string", "format": "date" },
        "lastInsideCleaning": { "type": "string", "format": "date" },
        "lastRepair": { "type": "string", "format": "date" },
        "otoplastic": { "$ref": "#/definitions/ApiArticleItemOverview" },
        "otoplasticCareDate": { "type": "string", "format": "date" },
        "prescription": { "type": "boolean" },
        "reservedFromDate": { "type": "string", "format": "date" },
        "side": { "$ref": "#/definitions/TranslatedString" },
        "state": { "$ref": "#/definitions/TranslatedString" },
        "subType": { "$ref": "#/definitions/TranslatedString" },
        "treatmentHeadID": { "type": "string" },
        "type": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "HearingCare",
      "description": "Detailed information about one hearing care"
    },
    "HearingCareSearchQuery": {
      "type": "object",
      "properties": {
        "createdFromDate": { "type": "string", "format": "date" },
        "createdStaffID": { "type": "string" },
        "createdToDate": { "type": "string", "format": "date" },
        "customerID": { "type": "string" },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "orderBy": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "treatmentHeadID": { "type": "string" }
      },
      "title": "HearingCareSearchQuery",
      "description": "Search query used to filter hearingcares"
    },
    "Image": {
      "type": "object",
      "properties": { "url": { "type": "string" } },
      "title": "Image",
      "description": "Image of e.g. article with metadata"
    },
    "Invoice": {
      "type": "object",
      "properties": {
        "acceptanceDate": { "type": "string", "format": "date" },
        "acceptanceNr": { "type": "string" },
        "acceptanceState": { "type": "string" },
        "accountingState": { "type": "string" },
        "addressID": { "type": "string" },
        "alternativeCostCenter": { "type": "string" },
        "applicationType": { "type": "integer", "format": "int64" },
        "cashDiscountDays": { "type": "integer", "format": "int32" },
        "cashDiscountGranted": { "type": "boolean" },
        "cashDiscountPercentage": { "type": "integer", "format": "int32" },
        "contributionFree": { "type": "boolean" },
        "costCenterBranchID": { "type": "string" },
        "costCoverage1": { "type": "number" },
        "costCoverage2": { "type": "number" },
        "costCoveragePercent1": { "type": "number" },
        "costCoveragePercent2": { "type": "number" },
        "customerID": { "type": "string" },
        "deliveryDate": { "type": "string", "format": "date" },
        "discount": { "type": "number" },
        "documents": {
          "type": "array",
          "items": { "$ref": "#/definitions/Document" }
        },
        "dunningLevel": { "type": "integer", "format": "int32" },
        "extraPayment": { "type": "number" },
        "gross": { "type": "boolean" },
        "id": { "type": "string" },
        "invoiceDate": { "type": "string", "format": "date" },
        "invoiceKind": { "type": "string" },
        "invoiceNr": { "type": "string" },
        "invoiceState": { "type": "string" },
        "invoiceType": { "type": "string" },
        "isVatExempt": { "type": "boolean" },
        "listPrice": { "type": "number" },
        "modified": { "type": "string", "format": "date-time" },
        "payed": { "type": "number" },
        "payedReminderDue": { "type": "number" },
        "paymentMethodID": { "type": "string" },
        "paymentReference": { "type": "string" },
        "paymentTarget": { "type": "string", "format": "date" },
        "positionNumber": { "type": "integer", "format": "int32" },
        "positions": {
          "type": "array",
          "items": { "$ref": "#/definitions/InvoicePosition" }
        },
        "price": { "type": "number" },
        "relatedToID": { "type": "string" },
        "remark1": { "type": "string" },
        "remark2": { "type": "string" },
        "remarkIntern": { "type": "string" },
        "sponsorID": { "type": "string" },
        "sponsorIndex": { "type": "integer", "format": "int32" },
        "staffID": { "type": "string" },
        "totalGross": { "type": "number" },
        "totalNet": { "type": "number" },
        "treatmentHeadID": { "type": "string" },
        "turnoverDate": { "type": "string", "format": "date" },
        "vatExemptionReason": { "type": "string" }
      },
      "title": "Invoice"
    },
    "InvoicePosition": {
      "type": "object",
      "properties": {
        "amount": { "type": "number" },
        "articleID": { "type": "string" },
        "articleVariantID": { "type": "string" },
        "costCoverage1": { "type": "number" },
        "costCoverage2": { "type": "number" },
        "costCoverageForHi1": { "type": "number" },
        "costCoverageForHi2": { "type": "number" },
        "description": { "type": "string" },
        "discount": { "type": "number" },
        "extraPayment": { "type": "number" },
        "id": { "type": "string" },
        "listPrice": { "type": "number" },
        "name": { "type": "string" },
        "posNr": { "type": "string" },
        "positionNumber": { "type": "integer", "format": "int32" },
        "price": { "type": "number" },
        "side": { "type": "string" },
        "tariffIndicator": { "type": "string" },
        "totalGross": { "type": "number" },
        "totalNet": { "type": "number" },
        "turnoverAmount": { "type": "number" },
        "vatType": { "type": "string" }
      },
      "title": "InvoicePosition"
    },
    "InvoicePositionToSave": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "example": 1.0,
          "description": "Amount",
          "allowEmptyValue": false
        },
        "articleId": {
          "type": "string",
          "example": "0114ee989656000001a8005056C00008",
          "description": "The ID of the article",
          "allowEmptyValue": false
        },
        "description": {
          "type": "string",
          "example": "Sonderposten",
          "description": "Additional description",
          "allowEmptyValue": false
        },
        "discount": {
          "type": "number",
          "example": 5.0,
          "description": "Total discount amount for this line",
          "allowEmptyValue": false
        },
        "name": {
          "type": "string",
          "example": "Etui",
          "description": "Name of the position. Will be displayed instead of the articles name",
          "allowEmptyValue": false
        },
        "price": {
          "type": "number",
          "example": 15.0,
          "description": "Sales price",
          "allowEmptyValue": false
        },
        "side": {
          "type": "string",
          "example": "side_right, side_left",
          "description": "Side",
          "allowEmptyValue": false
        },
        "uidManufacturer": {
          "type": "string",
          "example": "1DM-OEP-REV",
          "description": "If the articleId is not specified the article is searched by its manufacturer UID",
          "allowEmptyValue": false
        },
        "variantId": {
          "type": "string",
          "description": "The ID of the variant",
          "allowEmptyValue": false
        },
        "vatRate": {
          "type": "number",
          "example": 19.0,
          "description": "VAT rate",
          "allowEmptyValue": false
        },
        "vatType": {
          "type": "string",
          "example": "vat_full",
          "description": "VAT type (vat_full, vat_reduced, vat_no)",
          "allowEmptyValue": false
        }
      },
      "title": "InvoicePositionToSave",
      "description": "Object to store invoice positions"
    },
    "InvoiceSearchQuery": {
      "type": "object",
      "properties": {
        "customerID": {
          "type": "string",
          "example": "0115124dc15000000003005056C00008",
          "description": "Searches invoices by customerID",
          "allowEmptyValue": true
        },
        "invoiceDateFrom": {
          "type": "string",
          "format": "date",
          "example": "2019-01-01",
          "description": "Searches invoices by invoice date from",
          "allowEmptyValue": true
        },
        "invoiceDateTo": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "Searches invoices by invoice date to",
          "allowEmptyValue": true
        },
        "invoiceNr": {
          "type": "string",
          "example": "RE-*-19",
          "description": "Searches invoices by nr",
          "allowEmptyValue": true
        },
        "kind": {
          "type": "string",
          "example": "kind_glasses",
          "description": "Searches invoices by kind",
          "allowEmptyValue": true
        },
        "kinds": {
          "type": "array",
          "example": ["kind_glasses", "kind_common"],
          "description": "Searches invoices by multiple kinds",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches invoices by last modified date from",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches invoices by last modified date to",
          "allowEmptyValue": true
        },
        "state": {
          "type": "string",
          "example": "invoice_state_delivered",
          "description": "Searches invoices by state",
          "allowEmptyValue": true
        },
        "treatmentID": {
          "type": "string",
          "example": "0115124dc15000000003005056C00008",
          "description": "Searches invoices by treatment",
          "allowEmptyValue": true
        },
        "type": {
          "type": "string",
          "example": "invoice_type_customer_invoice",
          "description": "Searches invoices by type",
          "allowEmptyValue": true
        }
      },
      "title": "InvoiceSearchQuery",
      "description": "Search query used to filter invoices"
    },
    "ItemRef": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int32",
          "description": "amount of item to move",
          "allowEmptyValue": false
        },
        "itemID": {
          "type": "string",
          "description": "Id of item to move",
          "allowEmptyValue": false
        }
      },
      "title": "ItemRef"
    },
    "ItemsToTransfer": {
      "type": "object",
      "properties": {
        "destinationBranchID": {
          "type": "string",
          "description": "Branch id where items are to be moved in",
          "allowEmptyValue": false
        },
        "destinationStatus": {
          "type": "string",
          "example": "ai_state_transfer",
          "description": "The destination status (ai_state_transfer,ai_state_stock). ai_state_transfer (default) -&gt; branch has to accept the items, ai_state_stock items -&gt; are immediate in destination stock",
          "allowEmptyValue": true
        },
        "items": {
          "type": "array",
          "description": "List of items to move from source- to destination-branch",
          "allowEmptyValue": false,
          "items": { "$ref": "#/definitions/ItemRef" }
        },
        "notice": {
          "type": "string",
          "example": "Created from intranet-tool",
          "description": "Notice for delivery note and item move entries",
          "allowEmptyValue": true
        },
        "sourceBranchID": {
          "type": "string",
          "description": "Branch id where items are searched for (default is login-branch)",
          "allowEmptyValue": true
        }
      },
      "title": "ItemsToTransfer",
      "description": "Source and target branch, items to transfer an destination status and notice"
    },
    "LenseOptionSearchQuery": {
      "type": "object",
      "properties": {
        "companyID": {
          "type": "string",
          "description": "search lenses options for a specific company",
          "allowEmptyValue": true
        },
        "hstCode": {
          "type": "string",
          "description": "search lenses options by hst code",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches lenses options that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches lenses options that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        }
      },
      "title": "LenseOptionSearchQuery",
      "description": "Search query used to filter lenseoptions"
    },
    "LenseOptions": {
      "type": "object",
      "properties": {
        "availableFrom": { "type": "string", "format": "date" },
        "availableTo": { "type": "string", "format": "date" },
        "biLense": { "type": "boolean" },
        "blueControl": { "type": "boolean" },
        "branding": { "type": "boolean" },
        "cleanSurface": { "type": "string" },
        "color": { "type": "string" },
        "companyID": { "type": "string" },
        "description": { "type": "string" },
        "dezentration": { "type": "boolean" },
        "diameterFrom": { "type": "number" },
        "diameterTo": { "type": "number" },
        "differentAddition": { "type": "boolean" },
        "differentBending": { "type": "boolean" },
        "differentDiameter": { "type": "string" },
        "differentForm": { "type": "string" },
        "differentThickness": { "type": "string" },
        "discountAvailable": { "type": "string" },
        "et": { "type": "string" },
        "filteCategory": { "type": "string" },
        "forPlastic": { "type": "boolean" },
        "forPolycarbonat": { "type": "boolean" },
        "forSilikat": { "type": "boolean" },
        "forTrivex": { "type": "boolean" },
        "groupDescription": { "type": "string" },
        "hardSurface": { "type": "string" },
        "highContrast": { "type": "boolean" },
        "hstcode": { "type": "string" },
        "id": { "type": "string" },
        "impactOutsideDeliveryRange": { "type": "boolean" },
        "insurance": { "type": "boolean" },
        "lenseBaseHSFrom": { "type": "number" },
        "lenseBaseHSTo": { "type": "number" },
        "matting": { "type": "boolean" },
        "mirrorSurface": { "type": "boolean" },
        "modified": { "type": "string", "format": "date-time" },
        "onlineOrderinng": { "type": "boolean" },
        "outsidetorical": { "type": "boolean" },
        "phototrop": { "type": "boolean" },
        "polarizing": { "type": "boolean" },
        "pricelistManufacturerCode": { "type": "string" },
        "pricelistManufacturerVersion": { "type": "string" },
        "prismHeightAdjustment": { "type": "boolean" },
        "removeSurface": { "type": "boolean" },
        "roadTrafficRestriction": { "type": "string" },
        "singleLenseOrdering": { "type": "string" },
        "sorting": { "type": "integer", "format": "int32" },
        "standard": { "type": "string" },
        "unedging": { "type": "string" },
        "uvatransmission": { "type": "number" },
        "uvborder": { "type": "number" },
        "uvbtransmission": { "type": "number" },
        "uvsurface": { "type": "boolean" },
        "waveFrontOptimization": { "type": "boolean" }
      },
      "title": "LenseOptions"
    },
    "LenseType": {
      "type": "object",
      "properties": {
        "abbeNumber": { "type": "number" },
        "adjustment": { "type": "string" },
        "adjustmentConditionCover": { "type": "integer", "format": "int32" },
        "adjustmentConditionLense": { "type": "integer", "format": "int32" },
        "articleID": { "type": "string" },
        "asphericalLense": { "type": "string" },
        "availableFrom": { "type": "string", "format": "date" },
        "availableTo": { "type": "string", "format": "date" },
        "blueControl": { "type": "boolean" },
        "cleanSurfaceIncl": { "type": "string" },
        "companyID": { "type": "string" },
        "containingColor": { "type": "string" },
        "containingET": { "type": "string" },
        "density": { "type": "number" },
        "description": { "type": "string" },
        "differentDiametersIncl": { "type": "string" },
        "differentSizeIncl": { "type": "boolean" },
        "extendedWarranty": { "type": "boolean" },
        "filterCategory": { "type": "string" },
        "hardSurfaceIncl": { "type": "string" },
        "highContrast": { "type": "boolean" },
        "hstcode": { "type": "string" },
        "id": { "type": "string" },
        "insuranceIncl": { "type": "boolean" },
        "lentiLense": { "type": "boolean" },
        "mainCutTestInklAdd": { "type": "boolean" },
        "material": { "type": "string" },
        "mdmincl": { "type": "boolean" },
        "mirrorSurfaceIncl": { "type": "boolean" },
        "modified": { "type": "string", "format": "date-time" },
        "officeType": { "type": "string" },
        "phototrop": { "type": "boolean" },
        "polarizing": { "type": "boolean" },
        "pricelistManufacturerCode": { "type": "string" },
        "pricelistManufacturerVersion": { "type": "string" },
        "prismaIncl": { "type": "boolean" },
        "refractionIndex": { "type": "number" },
        "shortDescription": { "type": "string" },
        "singleLenseOrdering": { "type": "string" },
        "singleSize": { "type": "string" },
        "sorting": { "type": "integer", "format": "int32" },
        "standard": { "type": "string" },
        "stvorestricted": { "type": "string" },
        "travelerService": { "type": "boolean" },
        "uvatransmission": { "type": "number" },
        "uvborder": { "type": "number" },
        "uvbtransmission": { "type": "number" },
        "uvsurface": { "type": "boolean" },
        "waveFrontOptimization": { "type": "boolean" }
      },
      "title": "LenseType"
    },
    "LenseTypeSearchQuery": {
      "type": "object",
      "properties": {
        "companyID": {
          "type": "string",
          "description": "search lenses for a specific company",
          "allowEmptyValue": true
        },
        "hstCode": {
          "type": "string",
          "description": "search lenses by hst code",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches lenses that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches lenses that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        }
      },
      "title": "LenseTypeSearchQuery",
      "description": "Search query used to filter lensetypes"
    },
    "ListResultWrapper«Address»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Address" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Address»"
    },
    "ListResultWrapper«ApiCashDeskBalance»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ApiCashDeskBalance" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«ApiCashDeskBalance»"
    },
    "ListResultWrapper«AppointmentTemplate»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/AppointmentTemplate" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«AppointmentTemplate»"
    },
    "ListResultWrapper«Appointment»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Appointment" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Appointment»"
    },
    "ListResultWrapper«ArticleDetail»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ArticleDetail" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«ArticleDetail»"
    },
    "ListResultWrapper«ArticleItem»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ArticleItem" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«ArticleItem»"
    },
    "ListResultWrapper«ArticleOverview»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ArticleOverview" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«ArticleOverview»"
    },
    "ListResultWrapper«ArticleVariant»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ArticleVariant" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«ArticleVariant»"
    },
    "ListResultWrapper«Audiogram»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Audiogram" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Audiogram»"
    },
    "ListResultWrapper«Availability»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Availability" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Availability»"
    },
    "ListResultWrapper«Branch»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Branch" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Branch»"
    },
    "ListResultWrapper«Brand»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Brand" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Brand»"
    },
    "ListResultWrapper«Color»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Color" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Color»"
    },
    "ListResultWrapper«Comment»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Comment" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Comment»"
    },
    "ListResultWrapper«Company»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Company" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Company»"
    },
    "ListResultWrapper«ContactLense»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ContactLense" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«ContactLense»"
    },
    "ListResultWrapper«Customer»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Customer" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Customer»"
    },
    "ListResultWrapper«Delivery»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Delivery" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Delivery»"
    },
    "ListResultWrapper«Doctor»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Doctor" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Doctor»"
    },
    "ListResultWrapper«DocumentTemplate»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/DocumentTemplate" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«DocumentTemplate»"
    },
    "ListResultWrapper«Document»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Document" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Document»"
    },
    "ListResultWrapper«GlassesCare»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/GlassesCare" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«GlassesCare»"
    },
    "ListResultWrapper«HealthInsurance»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/HealthInsurance" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«HealthInsurance»"
    },
    "ListResultWrapper«HearingCare»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/HearingCare" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«HearingCare»"
    },
    "ListResultWrapper«Invoice»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Invoice" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Invoice»"
    },
    "ListResultWrapper«LenseOptions»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LenseOptions" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«LenseOptions»"
    },
    "ListResultWrapper«LenseType»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/LenseType" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«LenseType»"
    },
    "ListResultWrapper«MainVersion»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/MainVersion" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«MainVersion»"
    },
    "ListResultWrapper«MarketingAction»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/MarketingAction" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«MarketingAction»"
    },
    "ListResultWrapper«MarketingCampaign»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/MarketingCampaign" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«MarketingCampaign»"
    },
    "ListResultWrapper«MarketingContact»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/MarketingContact" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«MarketingContact»"
    },
    "ListResultWrapper«Order»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Order" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Order»"
    },
    "ListResultWrapper«PredefinedProperty»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/PredefinedProperty" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«PredefinedProperty»"
    },
    "ListResultWrapper«Principal»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Principal" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Principal»"
    },
    "ListResultWrapper«ProgramMove»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ProgramMove" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«ProgramMove»"
    },
    "ListResultWrapper«PropertyType»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/PropertyType" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«PropertyType»"
    },
    "ListResultWrapper«Resource»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Resource" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Resource»"
    },
    "ListResultWrapper«SalesPrice»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SalesPrice" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«SalesPrice»"
    },
    "ListResultWrapper«Server»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Server" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Server»"
    },
    "ListResultWrapper«ServiceContract»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/ServiceContract" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«ServiceContract»"
    },
    "ListResultWrapper«Staff»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Staff" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Staff»"
    },
    "ListResultWrapper«StockAmount»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/StockAmount" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«StockAmount»"
    },
    "ListResultWrapper«SurveyTemplate»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/SurveyTemplate" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«SurveyTemplate»"
    },
    "ListResultWrapper«Survey»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Survey" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Survey»"
    },
    "ListResultWrapper«Treatment»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Treatment" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Treatment»"
    },
    "ListResultWrapper«Version»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/Version" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«Version»"
    },
    "ListResultWrapper«View»": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": { "$ref": "#/definitions/View" }
        },
        "resultMetaData": { "$ref": "#/definitions/ResultMetaData" }
      },
      "title": "ListResultWrapper«View»"
    },
    "MainVersion": {
      "type": "object",
      "properties": {
        "endDate": { "type": "string", "format": "date" },
        "id": { "type": "string" },
        "number": { "type": "string" },
        "startDate": { "type": "string", "format": "date" },
        "status": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "MainVersion",
      "description": "Detailed information about one main version"
    },
    "MainVersionSearchQuery": {
      "type": "object",
      "properties": {
        "endDateFrom": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches all main versions that are build after given end date",
          "allowEmptyValue": true
        },
        "endDateTo": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches all main versions that are build before given end date",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "number": {
          "type": "string",
          "description": "Searches by using main version number. e.g. \"LTS-2020.4\"",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use mainversion/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "startDateFrom": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches all main versions that are build after given start date",
          "allowEmptyValue": true
        },
        "startDateTo": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches all main versions that are build before given start date",
          "allowEmptyValue": true
        },
        "status": {
          "type": "string",
          "example": "status_planned / status_released / status_unsupported",
          "description": "Searches all main versions for specific status",
          "allowEmptyValue": true
        }
      },
      "title": "MainVersionSearchQuery",
      "description": "Search query used to filter main versions"
    },
    "Map«string,string»": {
      "type": "object",
      "title": "Map«string,string»",
      "additionalProperties": { "type": "string" }
    },
    "MarketingAction": {
      "type": "object",
      "properties": {
        "branches": {
          "type": "array",
          "description": "which branches this marketing action is available in",
          "allowEmptyValue": false,
          "items": { "$ref": "#/definitions/BranchReduced" }
        },
        "creation": {
          "type": "string",
          "format": "date-time",
          "description": "marketing action creation date and time",
          "allowEmptyValue": false
        },
        "description": {
          "type": "string",
          "description": "description",
          "allowEmptyValue": false
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "end date of the marketing action",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "identCode": {
          "type": "string",
          "description": "identification code of the marketing action",
          "allowEmptyValue": false
        },
        "marketingCampaign": {
          "description": "associated marketing campaign",
          "allowEmptyValue": false,
          "$ref": "#/definitions/MarketingCampaignReduced"
        },
        "name": {
          "type": "string",
          "description": "name of the marketing action",
          "allowEmptyValue": false
        },
        "notForNewCustomers": {
          "type": "boolean",
          "example": false,
          "description": "is this marketing action available for new customers",
          "allowEmptyValue": false
        },
        "refererProgramName": {
          "type": "string",
          "description": "name of the program the referer receives",
          "allowEmptyValue": false
        },
        "referredProgramName": {
          "type": "string",
          "description": "name of the program the referred receives",
          "allowEmptyValue": false
        },
        "shortName": {
          "type": "string",
          "description": "short name of the marketing action",
          "allowEmptyValue": false
        },
        "sortSequence": {
          "type": "string",
          "description": "sort sequence of the marketing action",
          "allowEmptyValue": false
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "start date of the marketing action",
          "allowEmptyValue": false
        },
        "system": {
          "type": "boolean",
          "example": false,
          "description": "is this a system-defined marketing action (cannot be deleted)",
          "allowEmptyValue": false
        },
        "targetDescription": {
          "type": "string",
          "description": "intended goal of the marketing action",
          "allowEmptyValue": false
        },
        "type": {
          "description": "marketing action type",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        }
      },
      "title": "MarketingAction",
      "description": "Information about a marketing action"
    },
    "MarketingActionSearchQuery": {
      "type": "object",
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "find marketingactions by end date",
          "allowEmptyValue": true
        },
        "identCode": {
          "type": "string",
          "description": "find marketingactions by identcode",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "name": {
          "type": "string",
          "description": "find marketingactions by name",
          "allowEmptyValue": true
        },
        "notForNewCustomers": {
          "type": "boolean",
          "example": false,
          "description": "find marketingactions (not) available for new customers",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use comment/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "shortName": {
          "type": "string",
          "description": "find marketingactions by shortname",
          "allowEmptyValue": true
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "find marketingactions by start date",
          "allowEmptyValue": true
        },
        "system": {
          "type": "boolean",
          "example": false,
          "description": "find marketingactions that are system locked (cannot be modified/deleted)",
          "allowEmptyValue": true
        }
      },
      "title": "MarketingActionSearchQuery",
      "description": "Search query used to filter marketingactions"
    },
    "MarketingCampaign": {
      "type": "object",
      "properties": {
        "creation": {
          "type": "string",
          "format": "date-time",
          "description": "marketing campaign creation date and time",
          "allowEmptyValue": false
        },
        "description": {
          "type": "string",
          "description": "description of the marketing campaign",
          "allowEmptyValue": false
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "marketing campaign end date",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "identCode": {
          "type": "string",
          "description": "identification code of the marketing campaign",
          "allowEmptyValue": false
        },
        "name": {
          "type": "string",
          "description": "Name of the marketing campaign",
          "allowEmptyValue": false
        },
        "shortName": {
          "type": "string",
          "description": "short name",
          "allowEmptyValue": false
        },
        "staff": {
          "description": "staff that created the marketing campaign",
          "allowEmptyValue": false,
          "$ref": "#/definitions/StaffReduced"
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "marketing campaign start date",
          "allowEmptyValue": false
        },
        "targetDescription": {
          "type": "string",
          "description": "intended goal of the marketing campaign",
          "allowEmptyValue": false
        },
        "type": {
          "description": "marketing campaign type",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        }
      },
      "title": "MarketingCampaign",
      "description": "Information about a marketing campaign"
    },
    "MarketingCampaignReduced": {
      "type": "object",
      "properties": {
        "creation": { "type": "string", "format": "date-time" },
        "description": { "type": "string" },
        "endDate": { "type": "string", "format": "date" },
        "id": { "type": "string" },
        "identCode": { "type": "string" },
        "name": { "type": "string" },
        "shortName": { "type": "string" },
        "startDate": { "type": "string", "format": "date" },
        "targetDescription": { "type": "string" }
      },
      "title": "MarketingCampaignReduced",
      "description": "Reduced information about a marketing campaign"
    },
    "MarketingCampaignSearchQuery": {
      "type": "object",
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date",
          "description": "find marketingcampaigns by end date",
          "allowEmptyValue": true
        },
        "identCode": {
          "type": "string",
          "description": "find marketingcampaigns by identcode",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "name": {
          "type": "string",
          "description": "find marketingcampaigns by name",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use comment/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "shortName": {
          "type": "string",
          "description": "find marketingcampaigns by shortname",
          "allowEmptyValue": true
        },
        "staffInitials": {
          "type": "string",
          "description": "find marketingcampaigns by staff initials",
          "allowEmptyValue": true
        },
        "startDate": {
          "type": "string",
          "format": "date",
          "description": "find marketingcampaigns by start date",
          "allowEmptyValue": true
        },
        "type": {
          "type": "string",
          "description": "find marketingcampaigns by type (property type id)",
          "allowEmptyValue": true
        }
      },
      "title": "MarketingCampaignSearchQuery",
      "description": "Search query used to filter marketingcampaigns"
    },
    "MarketingContact": {
      "type": "object",
      "properties": {
        "contactSource": { "$ref": "#/definitions/TranslatedString" },
        "created": { "type": "string", "format": "date-time" },
        "id": { "type": "string" },
        "marketingActionID": { "type": "string" },
        "personID": {
          "type": "string",
          "description": "identifies the person, e.g. natural person or corporation. CustomerID / CompanyID etc. can be used",
          "allowEmptyValue": false
        },
        "refererPersonID": {
          "type": "string",
          "description": "identifies the person, e.g. natural person or corporation. CustomerID / CompanyID etc. can be used",
          "allowEmptyValue": false
        },
        "referralType": {
          "description": "identifies the type of referral which is configured as predefined property",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        },
        "respBranchID": { "type": "string" },
        "staffID": { "type": "string" }
      },
      "title": "MarketingContact"
    },
    "MarketingContactSearchQuery": {
      "type": "object",
      "properties": {
        "createdFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches marketing contacts that have been created after 'createdFrom' (inclusive)",
          "allowEmptyValue": true
        },
        "createdTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches marketing contacts that have been created before 'createdTo' (inclusive)",
          "allowEmptyValue": true
        },
        "marketingActionID": {
          "type": "string",
          "description": "Searches for exact marketingActionID",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use marketingcontact/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "personID": {
          "type": "string",
          "description": "Searches for exact personID",
          "allowEmptyValue": true
        },
        "staffID": {
          "type": "string",
          "description": "Searches for exact staffID",
          "allowEmptyValue": true
        }
      },
      "title": "MarketingContactSearchQuery",
      "description": "Search query used to filter marketingcontacts"
    },
    "Optional«Map«string,string»»": {
      "type": "object",
      "properties": { "present": { "type": "boolean" } },
      "title": "Optional«Map«string,string»»"
    },
    "Optional«boolean»": {
      "type": "object",
      "properties": { "present": { "type": "boolean" } },
      "title": "Optional«boolean»"
    },
    "Optional«string»": {
      "type": "object",
      "properties": { "present": { "type": "boolean" } },
      "title": "Optional«string»"
    },
    "Order": {
      "type": "object",
      "properties": {
        "creationDate": { "type": "string", "format": "date-time" },
        "deliveryDate": { "type": "string", "format": "date" },
        "express": { "type": "boolean" },
        "externalOrderNr": { "type": "string" },
        "externalOrderState": { "type": "string" },
        "externalOrderValidation": { "type": "string" },
        "id": { "type": "string" },
        "initiatorPersonID": { "type": "string" },
        "initiatorProcess": { "type": "string" },
        "mailSentDate": { "type": "string", "format": "date-time" },
        "notice": { "type": "string" },
        "orderData": { "type": "string" },
        "orderDate": { "type": "string", "format": "date-time" },
        "orderMethod": { "type": "string" },
        "orderNr": { "type": "string" },
        "positions": {
          "type": "array",
          "items": { "$ref": "#/definitions/OrderPosition" }
        },
        "receiverPersonID": { "type": "string" },
        "staffID": { "type": "string" },
        "state": { "type": "string" },
        "supplierPersonID": { "type": "string" },
        "trackingNumber": { "type": "string" },
        "type": { "type": "string" }
      },
      "title": "Order",
      "description": "Detailed information about an order"
    },
    "OrderBy": {
      "type": "object",
      "properties": {
        "ascDesc": { "type": "string" },
        "fieldName": { "type": "string" }
      },
      "title": "OrderBy"
    },
    "OrderPosition": {
      "type": "object",
      "properties": {
        "amount": { "type": "number" },
        "articleColorID": { "type": "string" },
        "articleID": { "type": "string" },
        "articleItemID": { "type": "string" },
        "articleVariantID": { "type": "string" },
        "customerID": { "type": "string" },
        "dateCreated": { "type": "string", "format": "date-time" },
        "deliveryDate": { "type": "string", "format": "date" },
        "deliveryPurposeID": { "type": "string" },
        "description": { "type": "string" },
        "externalOrderNr": { "type": "string" },
        "externalOrderState": { "type": "string" },
        "externalOrderValidation": { "type": "string" },
        "id": { "type": "string" },
        "lenseActionID": { "type": "string" },
        "notice": { "type": "string" },
        "orderDate": { "type": "string", "format": "date-time" },
        "orderSelection": { "type": "string" },
        "ownerType": { "type": "string" },
        "posRefNr": { "type": "string" },
        "purchaseListPrice": { "type": "number" },
        "rejectReason": { "type": "string" },
        "side": { "type": "string" },
        "sourceStockID": { "type": "string" },
        "staffCreatedID": { "type": "string" },
        "status": { "type": "string" },
        "stocked": { "type": "string" },
        "targetStockID": { "type": "string" },
        "treatmentHeadID": { "type": "string" },
        "type": { "type": "string" }
      },
      "title": "OrderPosition"
    },
    "OrderSearchQuery": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches orders by creation date",
          "allowEmptyValue": true
        },
        "deliveryDate": {
          "type": "string",
          "format": "date",
          "example": "2019-12-31",
          "description": "Searches invoices by delivery date",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches orders by order date",
          "allowEmptyValue": true
        },
        "orderNr": {
          "type": "string",
          "description": "Searches orders by order number",
          "allowEmptyValue": true
        },
        "state": {
          "type": "string",
          "example": "order_state_closed",
          "description": "Searches orders by state",
          "allowEmptyValue": true
        },
        "type": {
          "type": "string",
          "example": "order_type_order",
          "description": "Searches orders by type",
          "allowEmptyValue": true
        }
      },
      "title": "OrderSearchQuery",
      "description": "Search query used to filter orders"
    },
    "PredefinedProperty": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "propertyType": { "$ref": "#/definitions/PropertyType" },
        "value": {
          "description": "value of the property with technical key and translation",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        }
      },
      "title": "PredefinedProperty",
      "description": "Predefined property maybe user defined or not"
    },
    "PredefinedPropertyReduced": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "propertyTypeID": { "type": "string" },
        "value": {
          "description": "value of the property with technical key and translation",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        }
      },
      "title": "PredefinedPropertyReduced",
      "description": "Reduced information about a predefined property"
    },
    "PredefinedPropertySearchQuery": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "if true searches only for hidden predefined properties, if false only not hidden predefined properties are found, if empty all predefined properties independent of hidden are found",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches predefined propertied that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches predefined propertied that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "propertyTypeIDs": {
          "type": "array",
          "description": "See table property type to get IDs",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        }
      },
      "title": "PredefinedPropertySearchQuery",
      "description": "Search query, used to filter predefined properties"
    },
    "PredefinedPropertySimple": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "value": { "$ref": "#/definitions/TranslatedString" }
      },
      "title": "PredefinedPropertySimple",
      "description": "Simple information about a predefined property"
    },
    "Principal": {
      "type": "object",
      "properties": {
        "admin": { "type": "boolean" },
        "applicationType": { "type": "integer", "format": "int64" },
        "defaultBranchID": { "type": "string" },
        "id": { "type": "string" },
        "name": { "type": "string" },
        "principalCardID": { "type": "string" },
        "staffID": { "type": "string" }
      },
      "title": "Principal",
      "description": "Detailed information about one principal"
    },
    "PrincipalSearchQuery": {
      "type": "object",
      "properties": {
        "admin": {
          "type": "boolean",
          "example": false,
          "description": "if empty, will find all principal, also admin principal; true will find only admin principals; false will find only not admin principals",
          "allowEmptyValue": true
        },
        "applicationType": {
          "type": "integer",
          "format": "int64",
          "description": "Search for principals that use the given application type",
          "allowEmptyValue": true
        },
        "defaultBranchID": {
          "type": "string",
          "description": "Search for principals that have default branch given by branch id",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Name&amp;#42;\"",
          "allowEmptyValue": true
        },
        "principalCardID": {
          "type": "string",
          "description": "Search for principal which has principal card given by principal card id",
          "allowEmptyValue": true
        }
      },
      "title": "PrincipalSearchQuery",
      "description": "Search query used to filter principals"
    },
    "PrincipalToSave": {
      "type": "object",
      "properties": {
        "applicationType": {
          "type": "integer",
          "format": "int64",
          "description": "Application type",
          "allowEmptyValue": false
        },
        "defaultBranchID": {
          "type": "string",
          "description": "Default branch id",
          "allowEmptyValue": false
        },
        "isAdmin": {
          "type": "boolean",
          "example": false,
          "description": "True if admin principal",
          "allowEmptyValue": false
        },
        "lastPasswordChange": {
          "type": "string",
          "example": "2007-03-27T14:46:46",
          "description": "Last password change",
          "allowEmptyValue": false
        },
        "name": {
          "type": "string",
          "description": "Name",
          "allowEmptyValue": false
        },
        "password": {
          "type": "string",
          "description": "Password",
          "allowEmptyValue": false
        },
        "passwordScheme": {
          "type": "string",
          "description": "Password scheme",
          "allowEmptyValue": false
        },
        "pincode": {
          "type": "string",
          "example": [2, 5],
          "description": "Pin code",
          "allowEmptyValue": false
        },
        "pincodeHash": {
          "type": "string",
          "description": "Pin code hash",
          "allowEmptyValue": false
        },
        "principalCardID": {
          "type": "string",
          "description": "Principal card id",
          "allowEmptyValue": false
        },
        "staffID": {
          "type": "string",
          "description": "ID of the staff to whom the user account is assigned",
          "allowEmptyValue": false
        }
      },
      "title": "PrincipalToSave",
      "description": "DTO to save a principal"
    },
    "Procurement": {
      "type": "object",
      "properties": {
        "amount": { "type": "number" },
        "articleId": { "type": "string" },
        "deliverable": { "type": "boolean" },
        "id": { "type": "string" },
        "inventoryPrice": { "type": "boolean" },
        "orderCode": { "type": "string" },
        "price": { "type": "number" },
        "startDate": { "type": "string", "format": "date-time" }
      },
      "title": "Procurement",
      "description": "procurement prices and conditions for articles"
    },
    "ProgramMove": {
      "type": "object",
      "properties": {
        "amount": { "type": "number" },
        "articleID": { "type": "string" },
        "articleName": { "type": "string" },
        "balance": { "type": "number" },
        "costCenterBranchID": { "type": "string" },
        "creation": { "type": "string", "format": "date-time" },
        "customer": {
          "description": "Customer which is related to programmove",
          "allowEmptyValue": false,
          "$ref": "#/definitions/CustomerReduced"
        },
        "description": { "type": "string" },
        "id": { "type": "string" },
        "programName": { "type": "string" },
        "staff": {
          "description": "Staff which created programmove",
          "allowEmptyValue": false,
          "$ref": "#/definitions/StaffReduced"
        }
      },
      "title": "ProgramMove",
      "description": "One historic change entry of a customer program"
    },
    "ProgramMoveSearchQuery": {
      "type": "object",
      "properties": {
        "articleID": {
          "type": "string",
          "description": "Find program moves for given article id",
          "allowEmptyValue": true
        },
        "articleNameLike": {
          "type": "string",
          "description": "Find program moves for article name like",
          "allowEmptyValue": true
        },
        "branchID": {
          "type": "string",
          "description": "Find program moves for given branch id",
          "allowEmptyValue": true
        },
        "hoursBack": {
          "type": "integer",
          "format": "int32",
          "description": "Find program moves for last x hours",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use comment/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "programNameLike": {
          "type": "string",
          "description": "Find program moves for program name like",
          "allowEmptyValue": true
        }
      },
      "title": "ProgramMoveSearchQuery",
      "description": "Search query used to filter program moves"
    },
    "PropertyType": {
      "type": "object",
      "properties": {
        "category": {
          "description": "category of the property type with technical key and translation",
          "allowEmptyValue": true,
          "$ref": "#/definitions/TranslatedString"
        },
        "description": {
          "description": "description of the property type with technical key and translation",
          "allowEmptyValue": true,
          "$ref": "#/definitions/TranslatedString"
        },
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "name": {
          "description": "name of the property type with technical key and translation",
          "allowEmptyValue": true,
          "$ref": "#/definitions/TranslatedString"
        }
      },
      "title": "PropertyType",
      "description": "Type of property, maybe user defined or not"
    },
    "PropertyTypeSearchQuery": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "description": "All categories are available with url ../properties/propertytypes/categories",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "if true searches only for hidden property types, if false only not hidden property types are found, if empty all property types independent of hidden are found",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches property types that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches property types that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Name&amp;#42;\"",
          "allowEmptyValue": true
        }
      },
      "title": "PropertyTypeSearchQuery",
      "description": "Search query, used to filter property types"
    },
    "RefractionReport": {
      "type": "object",
      "properties": {
        "additionLeft": { "type": "number" },
        "additionRight": { "type": "number" },
        "base2Left": { "type": "number" },
        "base2Right": { "type": "number" },
        "baseLeft": { "type": "number" },
        "baseRight": { "type": "number" },
        "degreeLeft": { "type": "number" },
        "degreeRight": { "type": "number" },
        "diffHeight": { "type": "number" },
        "distanceLeft": { "type": "number" },
        "distanceRight": { "type": "number" },
        "documentTemplateId": { "type": "string" },
        "glassesCareTypeId": { "type": "string" },
        "hsaleft": { "type": "number" },
        "hsaright": { "type": "number" },
        "id": { "type": "string" },
        "indicationId": { "type": "string" },
        "inklinationLeft": { "type": "number" },
        "inklinationRight": { "type": "number" },
        "iodleft": { "type": "number" },
        "iodright": { "type": "number" },
        "ma2Left": { "type": "number" },
        "ma2Right": { "type": "number" },
        "maleft": { "type": "number" },
        "maright": { "type": "number" },
        "nearPartLeft": { "type": "number" },
        "nearPartRight": { "type": "number" },
        "notice": { "type": "string" },
        "prescriptorId": { "type": "string" },
        "prisma2Left": { "type": "number" },
        "prisma2Right": { "type": "number" },
        "prismaLeft": { "type": "number" },
        "prismaRight": { "type": "number" },
        "propertyIds": { "type": "string" },
        "refractionDate": { "type": "string", "format": "date" },
        "sphereLeft": { "type": "number" },
        "sphereRight": { "type": "number" },
        "staffId": { "type": "string" },
        "treatmentHeadId": { "type": "string" },
        "treatmentPositionId": { "type": "string" },
        "type": { "type": "string" },
        "uleft": { "type": "number" },
        "uright": { "type": "number" },
        "vccbinocular": { "type": "string" },
        "vccleft": { "type": "string" },
        "vccright": { "type": "string" },
        "visleft": { "type": "string" },
        "visright": { "type": "string" },
        "vleft": { "type": "number" },
        "vright": { "type": "number" },
        "vscbinocular": { "type": "string" },
        "vscleft": { "type": "string" },
        "vscright": { "type": "string" },
        "xleft": { "type": "number" },
        "xright": { "type": "number" },
        "yleft": { "type": "number" },
        "yright": { "type": "number" },
        "zylinderLeft": { "type": "number" },
        "zylinderRight": { "type": "number" }
      },
      "title": "RefractionReport"
    },
    "Resource": {
      "type": "object",
      "properties": {
        "branch": {
          "description": "identifier for location resource",
          "allowEmptyValue": true,
          "$ref": "#/definitions/BranchReduced"
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "description": "Specify how many appointments could be at same time, default 1",
          "allowEmptyValue": false
        },
        "colorCode": {
          "type": "string",
          "description": "RGB Hex color code of the resource in format #RRGGBB",
          "allowEmptyValue": false
        },
        "defaultAppMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "Default length of an appointment of that resource in minutes",
          "allowEmptyValue": false
        },
        "description": { "type": "string" },
        "forAllBranches": {
          "type": "boolean",
          "example": false,
          "description": "Visible for all branches",
          "allowEmptyValue": false
        },
        "forOnlineBooking": {
          "type": "boolean",
          "example": false,
          "description": "Flag if resource is anabled for online booking",
          "allowEmptyValue": false
        },
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "Hidden resources are set to true, not hidden false",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Name&amp;#42;\"",
          "allowEmptyValue": true
        },
        "staff": {
          "description": "identifier for human resource",
          "allowEmptyValue": true,
          "$ref": "#/definitions/StaffReduced"
        },
        "visibleInBranches": {
          "type": "array",
          "description": "List of branches in which the resource is visible",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/BranchReduced" }
        }
      },
      "title": "Resource",
      "description": "Resources are used with appointments or availabilities and describe either a staff (human resource) or a location (locale resource)"
    },
    "ResourceReduced": {
      "type": "object",
      "properties": {
        "id": { "type": "string" },
        "name": { "type": "string" }
      },
      "title": "ResourceReduced",
      "description": "Reduced information about a resource"
    },
    "ResourceSearchQuery": {
      "type": "object",
      "properties": {
        "branchID": {
          "type": "string",
          "description": "resources for specified branchID",
          "allowEmptyValue": true
        },
        "forOnlineBooking": {
          "type": "boolean",
          "example": false,
          "description": "if true, only resources enabled for online booking are found",
          "allowEmptyValue": true
        },
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "if empty, will find all resources, also hidden; true will find only hidden resources; false will find only not hidden resources",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches resources that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches resources that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "resources with specified name",
          "allowEmptyValue": true
        },
        "staffID": {
          "type": "string",
          "description": "resources for specified staffID",
          "allowEmptyValue": true
        }
      },
      "title": "ResourceSearchQuery",
      "description": "Search query used to filter resources"
    },
    "ResourceToSave": {
      "type": "object",
      "properties": {
        "branchID": {
          "type": "string",
          "description": "Use branch id of table branch here, used for location resource. Maybe null if human resource",
          "allowEmptyValue": false
        },
        "capacity": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Specify how many appointments could be at same time, default 1",
          "allowEmptyValue": false
        },
        "colorCode": {
          "type": "string",
          "example": "#00FF00",
          "description": "Specify color in format Hex format #RRGGBB, e.g. #01FFAE, default is black",
          "allowEmptyValue": false
        },
        "defaultAppMinutes": {
          "type": "integer",
          "format": "int32",
          "example": 60,
          "description": "Specify default length of appointment, 60 minutes if not given",
          "allowEmptyValue": false
        },
        "description": {
          "type": "string",
          "description": "Describes the resoruce, nullable",
          "allowEmptyValue": false
        },
        "forAllBranches": {
          "type": "boolean",
          "example": false,
          "description": "Visible for all branches, default is false",
          "allowEmptyValue": false
        },
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "To hide a resource set hidden to true, default false",
          "allowEmptyValue": false
        },
        "name": {
          "type": "string",
          "description": "Name of the resource, not null",
          "allowEmptyValue": false
        },
        "staffID": {
          "type": "string",
          "description": "Use staff id of table staff here, used for human resource. Maybe null if location resource",
          "allowEmptyValue": false
        },
        "visibleInBranches": {
          "type": "array",
          "description": "List of branch ids in which the resource is visible",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        }
      },
      "title": "ResourceToSave",
      "description": "DTO to save a resource"
    },
    "ResultMetaData": {
      "type": "object",
      "properties": {
        "completeCount": { "type": "integer", "format": "int32" },
        "currentCount": { "type": "integer", "format": "int32" },
        "currentLimit": { "type": "integer", "format": "int32" },
        "currentPage": { "type": "integer", "format": "int32" },
        "lastPage": { "type": "integer", "format": "int32" },
        "nextPage": { "type": "integer", "format": "int32" },
        "previousPage": { "type": "integer", "format": "int32" }
      },
      "title": "ResultMetaData"
    },
    "SalesPrice": {
      "type": "object",
      "properties": {
        "articleID": { "type": "string" },
        "grossPrice": { "type": "boolean" },
        "price": { "type": "number" },
        "startDate": { "type": "string", "format": "date" }
      },
      "title": "SalesPrice",
      "description": "Sales price for article"
    },
    "SalesPriceSearchQuery": {
      "type": "object",
      "properties": {
        "articleIDs": {
          "type": "array",
          "description": "a list of articles to fetch prices for",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "branchID": {
          "type": "string",
          "description": "if a branchID is given, prices are related to that branch, else prices are related to login branch",
          "allowEmptyValue": true
        },
        "changedSince": {
          "type": "string",
          "format": "date",
          "example": "2021-01-01",
          "description": "is a date is given, (potentially) changes since then are listed",
          "allowEmptyValue": true
        },
        "forSale": {
          "type": "boolean",
          "example": true,
          "description": "if true searches only for articles which are marked for sale, if false all articles which are not marked for alse are found, if empty all articles are found",
          "allowEmptyValue": true
        },
        "forWebshop": {
          "type": "boolean",
          "example": false,
          "description": "if true searches only for articles which are marked for webshop, if false all articles which are not marked for webshop are found, if empty all articles are found",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "startDate": {
          "type": "string",
          "format": "date",
          "example": "2021-01-01",
          "description": "is a date is given, prices are valid at that date, else prices are valid today",
          "allowEmptyValue": true
        }
      },
      "title": "SalesPriceSearchQuery",
      "description": "Search query used to filter sales prices"
    },
    "SalesTreatmentToCreate": {
      "type": "object",
      "properties": {
        "applicationType": { "type": "integer", "format": "int64" },
        "branchID": { "type": "string" },
        "creditCardType": { "type": "string" },
        "creditPointNumber": { "type": "string" },
        "creditPointType": { "type": "string" },
        "customer": { "$ref": "#/definitions/CustomerToSave" },
        "customerID": { "type": "string" },
        "date": {
          "type": "string",
          "format": "date",
          "example": "use null for today, yyyy-MM-dd for date given",
          "allowEmptyValue": false
        },
        "deliveryAddress": { "$ref": "#/definitions/AddressToSave" },
        "invoiceAddress": { "$ref": "#/definitions/AddressToSave" },
        "kind": { "type": "string" },
        "marketingActionID": { "type": "string" },
        "payment": { "type": "number" },
        "paymentNotForExport": { "type": "boolean" },
        "paymentNumber": { "type": "string" },
        "positions": {
          "type": "array",
          "items": { "$ref": "#/definitions/InvoicePositionToSave" }
        },
        "referenceNr": { "type": "string" }
      },
      "title": "SalesTreatmentToCreate",
      "description": "Create a sales order"
    },
    "SearchPropertyEntry": {
      "type": "object",
      "properties": {
        "predefinedPropertyId": { "type": "string" },
        "propertyTypeId": { "type": "string" }
      },
      "title": "SearchPropertyEntry"
    },
    "SearchQueryMetaData": {
      "type": "object",
      "properties": {
        "limit": { "type": "integer", "format": "int32" },
        "page": { "type": "integer", "format": "int32" }
      },
      "title": "SearchQueryMetaData"
    },
    "SecurityToken": {
      "type": "object",
      "properties": {
        "expiryTime": { "type": "string", "format": "date-time" },
        "value": { "type": "string" }
      },
      "title": "SecurityToken",
      "description": "Security token with information, when token will expire. Do re-login after token has expired."
    },
    "Server": {
      "type": "object",
      "properties": {
        "currentVersion": { "type": "string" },
        "id": { "type": "string" },
        "name": { "type": "string" },
        "requestDate": { "type": "string", "format": "date-time" },
        "requestNotice": { "type": "string" },
        "requestTargetDate": { "type": "string", "format": "date" },
        "requestUnstable": { "type": "boolean" },
        "requestVersion": { "type": "string" }
      },
      "title": "Server",
      "description": "Detailed information about a server"
    },
    "ServerSearchQuery": {
      "type": "object",
      "properties": {
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "onlyRequestedVersion": {
          "type": "boolean",
          "example": false,
          "description": "if true searches only for requested versions, if false only not requested versions are found, if empty all servers independent of requested are found",
          "allowEmptyValue": true
        },
        "requestVersion": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        }
      },
      "title": "ServerSearchQuery",
      "description": "Search query used to filter servers"
    },
    "ServiceContract": {
      "type": "object",
      "properties": {
        "articleID": { "type": "string" },
        "bankAccount": { "$ref": "#/definitions/BankAccount" },
        "billingMode": { "$ref": "#/definitions/TranslatedString" },
        "customerID": { "type": "string" },
        "directDebitDay": { "type": "integer", "format": "int32" },
        "endDate": { "type": "string", "format": "date" },
        "id": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "name": { "type": "string" },
        "notice": { "type": "string" },
        "number": { "type": "string" },
        "paymentIntervals": {
          "type": "array",
          "items": { "$ref": "#/definitions/ApiServiceContractInterval" }
        },
        "paymentMethod": { "$ref": "#/definitions/PredefinedPropertyReduced" },
        "price": { "type": "number" },
        "priceEnd": { "type": "string", "format": "date" },
        "priceReason": { "type": "string" },
        "priceStart": { "type": "string", "format": "date" },
        "runningTime": { "type": "integer", "format": "int32" },
        "startAccountingDate": { "type": "string", "format": "date" },
        "startDate": { "type": "string", "format": "date" },
        "treatmentHeadId": { "type": "string" },
        "type": { "$ref": "#/definitions/PredefinedPropertyReduced" }
      },
      "title": "ServiceContract",
      "description": "Detailed information about one service contract"
    },
    "ServiceContractSearchQuery": {
      "type": "object",
      "properties": {
        "articleID": {
          "type": "string",
          "description": "Searches by using a specific article ID",
          "allowEmptyValue": true
        },
        "customerIDs": {
          "type": "array",
          "description": "Searches by using multiple customer IDs",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "endDateFrom": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches service contracts that end after endDateFrom (inclusive)",
          "allowEmptyValue": true
        },
        "endDateTo": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches service contracts that end before endDateTo (inclusive)",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches service contracts that have last changed after modifiedFrom (inclusive)",
          "allowEmptyValue": true
        },
        "modifiedTo": {
          "type": "string",
          "format": "date-time",
          "example": "2019-11-05T06:35:00.000+01:00",
          "description": "Searches service contracts that have last changed before modifiedTo (inclusive)",
          "allowEmptyValue": true
        },
        "numbers": {
          "type": "array",
          "description": "Searches by using multiple service contract numbers",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use servicecontracts/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "startDateFrom": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches service contracts that start after startDateFrom (inclusive)",
          "allowEmptyValue": true
        },
        "startDateTo": {
          "type": "string",
          "format": "date",
          "example": "2018-03-27",
          "description": "Searches service contracts that start before startDateTo (inclusive)",
          "allowEmptyValue": true
        },
        "treatmentIDs": {
          "type": "array",
          "description": "Searches by using multiple treatment IDs",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        }
      },
      "title": "ServiceContractSearchQuery",
      "description": "Search query used to filter service contracts"
    },
    "Staff": {
      "type": "object",
      "properties": {
        "address": { "$ref": "#/definitions/Address" },
        "birthDate": { "type": "string", "format": "date" },
        "employerBranchID": { "type": "string" },
        "endDate": { "type": "string", "format": "date" },
        "entryDate": { "type": "string", "format": "date" },
        "extensionName": { "type": "string" },
        "firstname": { "type": "string" },
        "id": { "type": "string" },
        "initials": { "type": "string" },
        "salutation": { "type": "string" },
        "surname": { "type": "string" },
        "title": { "type": "string" }
      },
      "title": "Staff",
      "description": "Detailed information about a staff member"
    },
    "StaffReduced": {
      "type": "object",
      "properties": {
        "firstname": { "type": "string" },
        "id": { "type": "string" },
        "initials": { "type": "string" },
        "surname": { "type": "string" }
      },
      "title": "StaffReduced",
      "description": "Reduced information about a staff"
    },
    "StaffSearchQuery": {
      "type": "object",
      "properties": {
        "currentlyEmployed": {
          "type": "boolean",
          "example": false,
          "description": "true: Only currently employed staffs are returned, false: also not employed staffs are returned",
          "allowEmptyValue": true
        },
        "employedInBranch": {
          "type": "string",
          "description": "Search for staff currently employed in branch given by branch id",
          "allowEmptyValue": true
        },
        "firstName": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Name&amp;#42;\"",
          "allowEmptyValue": true
        },
        "initials": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Name&amp;#42;\"",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "surname": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Name&amp;#42;\"",
          "allowEmptyValue": true
        }
      },
      "title": "StaffSearchQuery",
      "description": "Search query used to filter staffs"
    },
    "StaffToSave": {
      "type": "object",
      "properties": {
        "birthdate": {
          "type": "string",
          "example": "1965-03-27",
          "description": "Staff birthday",
          "allowEmptyValue": false
        },
        "employerBranchID": {
          "type": "string",
          "description": "ID of the branch in which the staff is mainly employed",
          "allowEmptyValue": false
        },
        "endDate": {
          "type": "string",
          "example": "2007-03-27",
          "description": "Staff departure date",
          "allowEmptyValue": false
        },
        "entryDate": {
          "type": "string",
          "example": "2007-03-27",
          "description": "Staff entry date",
          "allowEmptyValue": false
        },
        "extensionname": {
          "type": "string",
          "description": "Staff name affix",
          "allowEmptyValue": false
        },
        "firstname": {
          "type": "string",
          "description": "Staff first name",
          "allowEmptyValue": false
        },
        "initials": {
          "type": "string",
          "description": "Abbreviation",
          "allowEmptyValue": false
        },
        "jobName": {
          "type": "string",
          "description": "Staff job name",
          "allowEmptyValue": false
        },
        "pauseMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "Duration of lunch break",
          "allowEmptyValue": false
        },
        "postNominal": { "$ref": "#/definitions/Optional«string»" },
        "salutation": {
          "type": "string",
          "description": "Staff salutation",
          "allowEmptyValue": false
        },
        "showTipOfTheDay": {
          "type": "boolean",
          "example": false,
          "description": "If true, the tip of the day will be displayed when starting",
          "allowEmptyValue": false
        },
        "signatureText": {
          "type": "string",
          "description": "Staff signature text",
          "allowEmptyValue": false
        },
        "socialSecurityNumber": {
          "type": "string",
          "description": "Social security number",
          "allowEmptyValue": false
        },
        "sponsorAccountingNumber": {
          "type": "string",
          "description": "Staff sponsor accounting number",
          "allowEmptyValue": false
        },
        "staffNr": {
          "type": "integer",
          "format": "int32",
          "description": "Staff number. If staff number is smaller than or equal 0 then a new unique staff number will be generated.",
          "allowEmptyValue": false
        },
        "surname": {
          "type": "string",
          "description": "Staff surname",
          "allowEmptyValue": false
        },
        "title": {
          "type": "string",
          "description": "Staff title",
          "allowEmptyValue": false
        },
        "vacationDays": {
          "type": "number",
          "example": "20,5",
          "description": "Staff vacation days",
          "allowEmptyValue": false
        },
        "workHours": {
          "type": "string",
          "description": "Work hours",
          "allowEmptyValue": false
        },
        "workHoursMonthly": {
          "type": "boolean",
          "example": false,
          "description": "workHoursMonthly",
          "allowEmptyValue": false
        }
      },
      "title": "StaffToSave",
      "description": "DTO to save a staff"
    },
    "StockAmount": {
      "type": "object",
      "properties": {
        "amount": { "type": "number" },
        "articleID": { "type": "string" },
        "branchID": { "type": "string" },
        "deliverable": { "type": "boolean" },
        "variantID": { "type": "string" }
      },
      "title": "StockAmount",
      "description": "Stock amount and deliverability per branch"
    },
    "StockAmountSearchQuery": {
      "type": "object",
      "properties": {
        "articleIDs": {
          "type": "array",
          "description": "list of articles",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "branchIDs": {
          "type": "array",
          "description": "list of branches, null for all branches",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "variantIDs": {
          "type": "array",
          "description": "list of article variants",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        }
      },
      "title": "StockAmountSearchQuery",
      "description": "Search query used to filter stock amounts"
    },
    "StockAvailability": {
      "type": "object",
      "properties": {
        "amount": { "type": "number" },
        "branchID": { "type": "string" },
        "branchName": { "type": "string" }
      },
      "title": "StockAvailability",
      "description": "Stock Amount per branch"
    },
    "Survey": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": { "$ref": "#/definitions/SurveyAnswer" }
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "date the survey was first started for this customer",
          "allowEmptyValue": false
        },
        "customer": {
          "description": "customer for which the survey was conducted",
          "allowEmptyValue": false,
          "$ref": "#/definitions/CustomerReduced"
        },
        "id": { "type": "string" },
        "result": {
          "type": "string",
          "description": "if the survey was evaluated based on a formula, this is the result of that evaluation",
          "allowEmptyValue": false
        },
        "staff": {
          "description": "staff that started the survey",
          "allowEmptyValue": false,
          "$ref": "#/definitions/StaffReduced"
        },
        "state": {
          "example": "survey_state_open, survey_state_closed",
          "description": "current state of the survey",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        },
        "sumWeighting": {
          "type": "integer",
          "format": "int32",
          "description": "if weighting was done, this is the weighted result of all answers",
          "allowEmptyValue": false
        },
        "surveyTemplateID": { "type": "string" },
        "treatmentPositionID": {
          "type": "string",
          "description": "if this survey was done as part of a treatment process, this id refers to the step in the treatment",
          "allowEmptyValue": false
        }
      },
      "title": "Survey",
      "description": "customer survey"
    },
    "SurveyAnswer": {
      "type": "object",
      "properties": {
        "freetext": { "type": "string" },
        "id": { "type": "string" },
        "number": { "type": "number" },
        "selected": { "type": "boolean" },
        "statedDate": { "type": "string", "format": "date" },
        "surveyTemplateAnswerID": { "type": "string" },
        "surveyTemplateQuestionID": { "type": "string" }
      },
      "title": "SurveyAnswer",
      "description": "a customers answer to a survey question"
    },
    "SurveySearchQuery": {
      "type": "object",
      "properties": {
        "creationDateFrom": {
          "type": "string",
          "format": "date",
          "description": "only surveys created atfer this date",
          "allowEmptyValue": true
        },
        "creationDateTo": {
          "type": "string",
          "format": "date",
          "description": "only surveys created before this date",
          "allowEmptyValue": true
        },
        "customerId": {
          "type": "string",
          "description": "filter by customer",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "state": {
          "type": "string",
          "example": "survey_state_open, survey_state_closed",
          "description": "survey state",
          "allowEmptyValue": true
        },
        "templateId": {
          "type": "string",
          "description": "survey template id",
          "allowEmptyValue": true
        }
      },
      "title": "SurveySearchQuery",
      "description": "Search query used to filter surveys"
    },
    "SurveyTemplate": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": { "$ref": "#/definitions/SurveyTemplateCategory" }
        },
        "consecutiveNumbering": { "type": "boolean" },
        "documentTemplateID": {
          "type": "string",
          "description": "id of the documenttemplate used to display this survey",
          "allowEmptyValue": false
        },
        "evaluationFormula": { "type": "string" },
        "evaluationType": {
          "example": "no_evaluation, category, weighting",
          "description": "method to evaluate the survey result",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        },
        "explanation": { "type": "string" },
        "groups": {
          "type": "array",
          "items": { "$ref": "#/definitions/SurveyTemplateGroup" }
        },
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "whether this survey is visible in the UI",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "identifier": {
          "type": "string",
          "description": "survey identifier, must be identical across all versions of this survey",
          "allowEmptyValue": false
        },
        "numberingGroup": {
          "example": "no_numbering, numeric, alphabetic, romanDigits",
          "description": "how survey groups are numbered",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        },
        "numberingQuestion": {
          "example": "no_numbering, numeric, alphabetic, romanDigits",
          "description": "how survey questions are numbered",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        },
        "systemName": {
          "type": "string",
          "description": "identifier for surveys preset by amparex",
          "allowEmptyValue": false
        },
        "takeOverAnswers": {
          "type": "boolean",
          "example": false,
          "description": "allow answers to be copied from previous survey upon creation?",
          "allowEmptyValue": false
        },
        "title": {
          "type": "string",
          "description": "display title",
          "allowEmptyValue": false
        },
        "type": {
          "description": "survey type",
          "allowEmptyValue": false,
          "$ref": "#/definitions/PredefinedPropertyReduced"
        },
        "versionNumber": {
          "type": "integer",
          "format": "int32",
          "description": "version number",
          "allowEmptyValue": false
        }
      },
      "title": "SurveyTemplate",
      "description": "customer survey template"
    },
    "SurveyTemplateAnswer": {
      "type": "object",
      "properties": {
        "answer": { "type": "string" },
        "category": { "$ref": "#/definitions/SurveyTemplateCategory" },
        "decimalsValue": { "type": "integer", "format": "int32" },
        "defaultValue": { "type": "number" },
        "finalValue": { "type": "integer", "format": "int32" },
        "freetext": { "type": "boolean" },
        "id": { "type": "string" },
        "imageID": { "type": "string" },
        "matrixQuestion": { "type": "string" },
        "sortSequence": { "type": "string" },
        "startValue": { "type": "integer", "format": "int32" },
        "weighting": { "type": "integer", "format": "int32" }
      },
      "title": "SurveyTemplateAnswer",
      "description": "possible answer to a survey question"
    },
    "SurveyTemplateCategory": {
      "type": "object",
      "properties": {
        "categoryName": { "type": "string" },
        "id": { "type": "string" },
        "sortSequence": { "type": "string" }
      },
      "title": "SurveyTemplateCategory",
      "description": "evaluation category within a survey"
    },
    "SurveyTemplateGroup": {
      "type": "object",
      "properties": {
        "explanation": { "type": "string" },
        "id": { "type": "string" },
        "identifier": {
          "type": "string",
          "description": "group identifier",
          "allowEmptyValue": false
        },
        "pseudo": {
          "type": "boolean",
          "example": false,
          "description": "pseudogroup present in surveys without grouping",
          "allowEmptyValue": false
        },
        "questions": {
          "type": "array",
          "description": "list of survey questions in this group",
          "allowEmptyValue": false,
          "items": { "$ref": "#/definitions/SurveyTemplateQuestion" }
        },
        "sortSequence": {
          "type": "string",
          "example": "1, 2, 3 ...",
          "description": "group sort sequence",
          "allowEmptyValue": false
        },
        "title": {
          "type": "string",
          "description": "group display title",
          "allowEmptyValue": false
        }
      },
      "title": "SurveyTemplateGroup",
      "description": "a group of questions in a survey template"
    },
    "SurveyTemplateQuestion": {
      "type": "object",
      "properties": {
        "answers": {
          "type": "array",
          "items": { "$ref": "#/definitions/SurveyTemplateAnswer" }
        },
        "headerMatrixAnswer": { "type": "string" },
        "headerMatrixQuestion": { "type": "string" },
        "id": { "type": "string" },
        "identifier": {
          "type": "string",
          "description": "question identifier",
          "allowEmptyValue": false
        },
        "imageID": {
          "type": "string",
          "description": "image to display alongside the question",
          "allowEmptyValue": false
        },
        "obligatory": {
          "type": "boolean",
          "example": false,
          "description": "is this question obligatory to complete the survey?",
          "allowEmptyValue": false
        },
        "question": {
          "type": "string",
          "description": "question text",
          "allowEmptyValue": false
        },
        "questionType": {
          "example": "single_choice, multiple_choice, date, freetext, numeric_scale, matrix_single_choice, matrix_multiple_choice",
          "description": "question type",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        },
        "representation": {
          "example": "vertical, horizontal, singleline, multiline, textfield, slider, combobox, questions_as_rows, questions_as_columns",
          "description": "visual representation of the input method",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        },
        "sortSequence": {
          "type": "string",
          "example": "1, 2, 3 ...",
          "description": "question sort sequence",
          "allowEmptyValue": false
        }
      },
      "title": "SurveyTemplateQuestion",
      "description": "survey template question"
    },
    "SurveyTemplateSearchQuery": {
      "type": "object",
      "properties": {
        "hidden": {
          "type": "boolean",
          "example": false,
          "description": "only fetch hidden/non-hidden templates",
          "allowEmptyValue": true
        },
        "identifier": {
          "type": "string",
          "description": "filter by identifier; exact match",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "onlyLatest": {
          "type": "boolean",
          "example": false,
          "description": "get only the latest version of each surveytemplate; default: true",
          "allowEmptyValue": true
        },
        "title": {
          "type": "string",
          "description": "filter by surveytemplate title",
          "allowEmptyValue": true
        }
      },
      "title": "SurveyTemplateSearchQuery",
      "description": "Search query used to filter surveytemplates"
    },
    "SurveyTemplateToSave": {
      "type": "object",
      "title": "SurveyTemplateToSave",
      "description": "DTO to save a surveytemplate"
    },
    "TherapeuticsTreatment": {
      "type": "object",
      "properties": {
        "acceptanceDate": { "type": "string", "format": "date" },
        "acceptanceNr": { "type": "string" },
        "applicationType": { "$ref": "#/definitions/ApplicationType" },
        "articleSetName": { "type": "string" },
        "avoidCollectiveInvoice": { "type": "boolean" },
        "branchID": { "type": "string" },
        "causationDate": { "type": "string", "format": "date" },
        "checkMandatory": { "type": "string" },
        "companyID": { "type": "string" },
        "complaints": {
          "type": "array",
          "items": { "$ref": "#/definitions/Complaint" }
        },
        "convertReasonPropertyID": { "type": "string" },
        "coverageTreatmentExtension": { "type": "string" },
        "customer": { "$ref": "#/definitions/CustomerReduced" },
        "dataChecked": { "type": "boolean" },
        "deliveryAddressID": { "type": "string" },
        "demoHearingCares": {
          "type": "array",
          "items": { "$ref": "#/definitions/HearingCare" }
        },
        "diagnosis": { "type": "string" },
        "doctor": { "$ref": "#/definitions/DoctorReduced" },
        "endDate": { "type": "string", "format": "date" },
        "exemptFromExtraPaymentAmount": {
          "type": "integer",
          "format": "int32"
        },
        "exemptFromExtraPaymentStatus": {
          "$ref": "#/definitions/TranslatedString"
        },
        "extraStaff": { "$ref": "#/definitions/StaffReduced" },
        "healthInsurance": { "$ref": "#/definitions/HealthInsuranceReduced" },
        "hiMembership2ID": { "type": "string" },
        "hiMembershipID": { "type": "string" },
        "icdKey": { "type": "string" },
        "id": { "type": "string" },
        "importDate": { "type": "string", "format": "date-time" },
        "invoices": {
          "type": "array",
          "items": { "$ref": "#/definitions/Invoice" }
        },
        "isWorking": { "type": "string" },
        "kind": { "$ref": "#/definitions/TranslatedString" },
        "marketingContactID": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "name": { "type": "string" },
        "payedPrepayment": { "type": "number" },
        "prescriptionDate": { "type": "string", "format": "date" },
        "prescriptionNumber": { "type": "string" },
        "prescriptionType": { "$ref": "#/definitions/TranslatedString" },
        "referenceNumber": { "type": "string" },
        "refractionReports": {
          "type": "array",
          "items": { "$ref": "#/definitions/RefractionReport" }
        },
        "relatedToID": {
          "type": "string",
          "description": "A link to a previous, related treatment",
          "allowEmptyValue": true
        },
        "repetitionIndex": { "type": "integer", "format": "int32" },
        "repetitionType": { "$ref": "#/definitions/TranslatedString" },
        "side": { "$ref": "#/definitions/TranslatedString" },
        "staff": { "$ref": "#/definitions/StaffReduced" },
        "startDate": { "type": "string", "format": "date" },
        "state": { "$ref": "#/definitions/TranslatedString" },
        "tariffIndicator": { "type": "string" },
        "treatmentNr": { "type": "string" },
        "treatmentPositions": {
          "type": "array",
          "items": { "$ref": "#/definitions/TreatmentPosition" }
        },
        "useStartDateForPricing": { "type": "boolean" }
      },
      "title": "TherapeuticsTreatment",
      "description": "Detailed information about one therapeutics treatment"
    },
    "Timestamp": {
      "type": "object",
      "properties": {
        "date": { "type": "integer", "format": "int32" },
        "day": { "type": "integer", "format": "int32" },
        "hours": { "type": "integer", "format": "int32" },
        "minutes": { "type": "integer", "format": "int32" },
        "month": { "type": "integer", "format": "int32" },
        "nanos": { "type": "integer", "format": "int32" },
        "seconds": { "type": "integer", "format": "int32" },
        "time": { "type": "integer", "format": "int64" },
        "timezoneOffset": { "type": "integer", "format": "int32" },
        "year": { "type": "integer", "format": "int32" }
      },
      "title": "Timestamp"
    },
    "TranslatedString": {
      "type": "object",
      "properties": {
        "key": { "type": "string" },
        "translated": { "type": "string" }
      },
      "title": "TranslatedString"
    },
    "Treatment": {
      "type": "object",
      "properties": {
        "acceptanceDate": { "type": "string", "format": "date" },
        "acceptanceNr": { "type": "string" },
        "applicationType": { "$ref": "#/definitions/ApplicationType" },
        "articleSetName": { "type": "string" },
        "avoidCollectiveInvoice": { "type": "boolean" },
        "branchID": { "type": "string" },
        "causationDate": { "type": "string", "format": "date" },
        "checkMandatory": { "type": "string" },
        "companyID": { "type": "string" },
        "complaints": {
          "type": "array",
          "items": { "$ref": "#/definitions/Complaint" }
        },
        "convertReasonPropertyID": { "type": "string" },
        "coverageTreatmentExtension": { "type": "string" },
        "customer": { "$ref": "#/definitions/CustomerReduced" },
        "dataChecked": { "type": "boolean" },
        "deliveryAddressID": { "type": "string" },
        "demoHearingCares": {
          "type": "array",
          "items": { "$ref": "#/definitions/HearingCare" }
        },
        "doctorID": { "type": "string" },
        "endDate": { "type": "string", "format": "date" },
        "exemptFromExtraPaymentAmount": {
          "type": "integer",
          "format": "int32"
        },
        "exemptFromExtraPaymentStatus": {
          "$ref": "#/definitions/TranslatedString"
        },
        "extraStaff": { "$ref": "#/definitions/StaffReduced" },
        "hiMembership2ID": { "type": "string" },
        "hiMembershipID": { "type": "string" },
        "id": { "type": "string" },
        "importDate": { "type": "string", "format": "date-time" },
        "invoices": {
          "type": "array",
          "items": { "$ref": "#/definitions/Invoice" }
        },
        "isWorking": { "type": "string" },
        "kind": { "$ref": "#/definitions/TranslatedString" },
        "marketingContactID": { "type": "string" },
        "modified": { "type": "string", "format": "date-time" },
        "name": { "type": "string" },
        "payedPrepayment": { "type": "number" },
        "prescriptionDate": { "type": "string", "format": "date" },
        "prescriptionNumber": { "type": "string" },
        "prescriptionType": { "$ref": "#/definitions/TranslatedString" },
        "referenceNumber": { "type": "string" },
        "refractionReports": {
          "type": "array",
          "items": { "$ref": "#/definitions/RefractionReport" }
        },
        "relatedToID": {
          "type": "string",
          "description": "A link to a previous, related treatment",
          "allowEmptyValue": true
        },
        "repetitionIndex": { "type": "integer", "format": "int32" },
        "repetitionType": { "$ref": "#/definitions/TranslatedString" },
        "side": { "$ref": "#/definitions/TranslatedString" },
        "staff": { "$ref": "#/definitions/StaffReduced" },
        "startDate": { "type": "string", "format": "date" },
        "state": { "$ref": "#/definitions/TranslatedString" },
        "tariffIndicator": { "type": "string" },
        "treatmentNr": { "type": "string" },
        "treatmentPositions": {
          "type": "array",
          "items": { "$ref": "#/definitions/TreatmentPosition" }
        },
        "useStartDateForPricing": { "type": "boolean" }
      },
      "title": "Treatment",
      "description": "Treatment of a customer"
    },
    "TreatmentCreationResponse": {
      "type": "object",
      "properties": {
        "createdID": { "type": "string" },
        "customerID": { "type": "string" },
        "errorMessage": { "type": "string" }
      },
      "title": "TreatmentCreationResponse",
      "description": "Returns the result of a successful creation of an entity"
    },
    "TreatmentPosition": {
      "type": "object",
      "properties": {
        "actionStatus": { "type": "string" },
        "actionStatusType": { "type": "string" },
        "active": { "type": "boolean" },
        "daysAfterAction": { "type": "integer", "format": "int32" },
        "description": { "type": "string" },
        "docDocumentID": { "type": "string" },
        "doneAt": { "type": "string", "format": "date" },
        "excludePredefinedProperty": { "type": "string" },
        "finalStep": { "type": "boolean" },
        "id": { "type": "string" },
        "instantPrint": { "type": "boolean" },
        "mandatory": { "type": "boolean" },
        "name": { "type": "string" },
        "orderID": { "type": "string" },
        "positionIdent": { "type": "string" },
        "positionType": { "type": "string" },
        "predefinedPropertyID": { "type": "string" },
        "propertyTypeID": { "type": "string" },
        "sequence": { "type": "integer", "format": "int32" },
        "staffID": { "type": "string" },
        "state": { "type": "string" },
        "treatmentPropertyID": { "type": "string" }
      },
      "title": "TreatmentPosition"
    },
    "TreatmentSearchQuery": {
      "type": "object",
      "properties": {
        "customerID": { "type": "string" },
        "endDateFrom": { "type": "string", "format": "date" },
        "endDateTo": { "type": "string", "format": "date" },
        "kind": { "type": "string" },
        "loadComplaints": { "type": "boolean" },
        "loadInvoices": { "type": "boolean" },
        "loadRefractionReports": { "type": "boolean" },
        "loadTreatmentPositions": { "type": "boolean" },
        "loadTrialHearingCares": { "type": "boolean" },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "modifiedFrom": { "type": "string", "format": "date-time" },
        "modifiedTo": { "type": "string", "format": "date-time" },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use treatments/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "startDateFrom": { "type": "string", "format": "date" },
        "startDateTo": { "type": "string", "format": "date" },
        "state": { "type": "string" },
        "treatmentNr": { "type": "string" }
      },
      "title": "TreatmentSearchQuery",
      "description": "Search query used to filter treatments"
    },
    "Version": {
      "type": "object",
      "properties": {
        "buildTime": { "type": "string", "format": "date-time" },
        "id": { "type": "string" },
        "mainVersionID": { "type": "string" },
        "number": { "type": "string" },
        "stable": { "type": "boolean" }
      },
      "title": "Version",
      "description": "Detailed information about one version"
    },
    "VersionSearchQuery": {
      "type": "object",
      "properties": {
        "buildTimeFrom": {
          "type": "string",
          "format": "date-time",
          "example": "2018-03-27 12:00:00",
          "description": "Searches all version that are build after given timestamp",
          "allowEmptyValue": true
        },
        "buildTimeTo": {
          "type": "string",
          "format": "date-time",
          "example": "2018-03-27 12:00:00",
          "description": "Searches all version that are build before given timestamp",
          "allowEmptyValue": true
        },
        "mainVersionID": {
          "type": "string",
          "description": "Searches for all versions for the corresponding main version",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "number": {
          "type": "string",
          "description": "Searches by using a specific release number",
          "allowEmptyValue": true
        },
        "orderBy": {
          "type": "array",
          "description": "Multiple order by criteria, use version/orderByFields to get possible values. Use \"ASC\" for ascending, \"DESC\" for descending order; default is \"ASC\". Maximum 3 order criteria are used.",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/OrderBy" }
        },
        "release": {
          "type": "string",
          "description": "Searches by using major release. e.g. \"LTS-2020.4\"",
          "allowEmptyValue": true
        },
        "stable": {
          "type": "boolean",
          "example": false,
          "description": "Searches for stable / unstable builds",
          "allowEmptyValue": true
        }
      },
      "title": "VersionSearchQuery",
      "description": "Search query used to filter versions"
    },
    "VersionToSave": {
      "type": "object",
      "required": ["buildTime", "mainVersionID", "number", "stable"],
      "properties": {
        "buildTime": {
          "type": "string",
          "example": "2021-01-01 22:00:00",
          "description": "The build time of the version",
          "allowEmptyValue": false
        },
        "mainVersion": {
          "type": "string",
          "example": "LTS-2020.4",
          "description": "The main release of the version. Either mainVersion or mainVersionID is mandatory",
          "allowEmptyValue": false
        },
        "mainVersionID": {
          "type": "string",
          "description": "The main release ID of the version. Either mainVersion or mainVersionID is mandatory",
          "allowEmptyValue": false
        },
        "number": {
          "type": "string",
          "example": "LTS-2020.4.0.0",
          "description": "The specific release number of the version",
          "allowEmptyValue": false
        },
        "stable": {
          "type": "boolean",
          "example": true,
          "description": "Specifies whether the version is a stable one",
          "allowEmptyValue": false
        }
      },
      "title": "VersionToSave",
      "description": "DTO to save a version"
    },
    "View": {
      "type": "object",
      "properties": {
        "branch": {
          "description": "Connected to table branch",
          "allowEmptyValue": true,
          "$ref": "#/definitions/BranchReduced"
        },
        "connectedResources": {
          "type": "array",
          "description": "List of connectedResources, which are assigned to the view",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/ViewResource" }
        },
        "days": {
          "type": "integer",
          "format": "int32",
          "description": "Count in days which are visible by default",
          "allowEmptyValue": false
        },
        "endTime": {
          "type": "string",
          "description": "End time to which default view is visible",
          "allowEmptyValue": false
        },
        "id": { "type": "string" },
        "name": {
          "type": "string",
          "description": "Name of the view",
          "allowEmptyValue": false
        },
        "rulerMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "Grid size of the timeplanner in minutes",
          "allowEmptyValue": true
        },
        "sorting": {
          "type": "integer",
          "format": "int32",
          "description": "Sequence of tab order",
          "allowEmptyValue": false
        },
        "startTime": {
          "type": "string",
          "description": "Start time from which default view is visible",
          "allowEmptyValue": false
        },
        "text": {
          "type": "string",
          "description": "Text in the header title",
          "allowEmptyValue": true
        },
        "title": {
          "type": "string",
          "description": "Text of the timeplanner tab",
          "allowEmptyValue": false
        },
        "type": {
          "description": "Should be one of the following values: resource_planner, day_planner, treatment_planner",
          "allowEmptyValue": false,
          "$ref": "#/definitions/TranslatedString"
        }
      },
      "title": "View",
      "description": "A view of connectedResources in the timeplanner"
    },
    "ViewResource": {
      "type": "object",
      "properties": {
        "resource": {
          "description": "Connected resource",
          "allowEmptyValue": false,
          "$ref": "#/definitions/ResourceReduced"
        },
        "title": { "type": "string" }
      },
      "title": "ViewResource",
      "description": "Connection between timeplanner view and resource"
    },
    "ViewResourceToSave": {
      "type": "object",
      "properties": {
        "resourceID": {
          "type": "string",
          "description": "Use resource id of table resource here",
          "allowEmptyValue": false
        },
        "title": {
          "type": "string",
          "description": "Title in timeplanner",
          "allowEmptyValue": false
        }
      },
      "title": "ViewResourceToSave",
      "description": "DTO to save a view resource connection"
    },
    "ViewSearchQuery": {
      "type": "object",
      "properties": {
        "branchID": {
          "type": "string",
          "description": "Searches for the branchID field of the view",
          "allowEmptyValue": true
        },
        "metaData": { "$ref": "#/definitions/SearchQueryMetaData" },
        "name": {
          "type": "string",
          "description": "Wildcard search could be used with '&amp;#42;',  for example \"Xyz&amp;#42;\"",
          "allowEmptyValue": true
        },
        "type": {
          "type": "string",
          "description": "Use one of the following values: resource_planner, day_planner, treatment_planner",
          "allowEmptyValue": true
        },
        "visibleInBranchID": {
          "type": "string",
          "description": "Searches for views which are visible in branch x",
          "allowEmptyValue": true
        }
      },
      "title": "ViewSearchQuery",
      "description": "Search query used to filter views"
    },
    "ViewToSave": {
      "type": "object",
      "properties": {
        "branchID": {
          "type": "string",
          "description": "Connected to table branch, nullable",
          "allowEmptyValue": true
        },
        "connectedResources": {
          "type": "array",
          "description": "List of connectedResources, which are assigned to the view",
          "allowEmptyValue": true,
          "items": { "$ref": "#/definitions/ViewResourceToSave" }
        },
        "days": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Count in days which are visible by default, if empty 1 or 5 is set depending on type of view",
          "allowEmptyValue": true
        },
        "endTime": {
          "type": "string",
          "example": "18:00:00",
          "description": "End time to which default view is visible, if not set default is 18:00:00",
          "allowEmptyValue": true
        },
        "name": {
          "type": "string",
          "description": "Name of the view, not null",
          "allowEmptyValue": false
        },
        "rulerMinutes": {
          "type": "integer",
          "format": "int32",
          "example": 60,
          "description": "Grid size of the timeplanner in minutes, default is 60",
          "allowEmptyValue": true
        },
        "sorting": {
          "type": "integer",
          "format": "int32",
          "example": 10,
          "description": "Sequence of tab order, beginning with smallest, default is 10",
          "allowEmptyValue": true
        },
        "startTime": {
          "type": "string",
          "example": "09:00:00",
          "description": "Start time from which default view is visible, if not set default is 09:00:00",
          "allowEmptyValue": true
        },
        "text": {
          "type": "string",
          "description": "Text in the header title, nullable",
          "allowEmptyValue": true
        },
        "title": {
          "type": "string",
          "description": "Text of the timeplanner tab, not null",
          "allowEmptyValue": false
        },
        "type": {
          "type": "string",
          "description": "Not null, Use one of the following values: resource_planner, day_planner, treatment_planner",
          "allowEmptyValue": false
        }
      },
      "title": "ViewToSave",
      "description": "DTO to save a view"
    },
    "WhoAmI": {
      "type": "object",
      "properties": {
        "applicationType": { "$ref": "#/definitions/ApplicationType" },
        "callCountMode": { "$ref": "#/definitions/TranslatedString" },
        "currentCallCount": { "type": "integer", "format": "int64" },
        "loginBranchID": { "type": "string" },
        "pinCodeLength": { "type": "integer", "format": "int32" },
        "remainingCallCount": { "type": "integer", "format": "int64" },
        "resourceID": { "type": "string" },
        "staffID": { "type": "string" },
        "user": { "type": "string" }
      },
      "title": "WhoAmI",
      "description": "Detailed information about the current userlogin"
    },
    "request for synchronization": {
      "type": "object",
      "properties": {
        "availabilities": {
          "type": "boolean",
          "example": false,
          "description": "if true only availabilities are returned, if false only appointments",
          "allowEmptyValue": true
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "maximum count of results",
          "allowEmptyValue": true
        },
        "resourceIDs": {
          "type": "array",
          "description": "the resources to get changes for",
          "allowEmptyValue": true,
          "items": { "type": "string" }
        },
        "syncToken": {
          "type": "string",
          "description": "token from last synchronization",
          "allowEmptyValue": true
        }
      },
      "title": "request for synchronization",
      "description": "Ask for changes in appointment planner"
    },
    "result of synchronization": {
      "type": "object",
      "properties": {
        "appointment": {
          "description": "Appointment details",
          "allowEmptyValue": false,
          "$ref": "#/definitions/AppointmentSync"
        },
        "appointmentID": {
          "type": "string",
          "description": "Changed appointment ID",
          "allowEmptyValue": false
        },
        "entries": {
          "type": "array",
          "description": "list of changes in appointment planner",
          "allowEmptyValue": false,
          "items": { "$ref": "#/definitions/result of synchronization" }
        },
        "removed": {
          "type": "boolean",
          "example": false,
          "description": "if true, appointment with given ID was deleted",
          "allowEmptyValue": false
        },
        "syncToken": {
          "type": "string",
          "description": "token to be sent with next synchronization request",
          "allowEmptyValue": false
        }
      },
      "title": "result of synchronization",
      "description": "Deliver changes in appointment planner"
    }
  }
}
